syntax = "proto3";
option go_package = "google.golang.org/appengine/internal/urlfetch";

package appengine;

message URLFetchServiceError {
  enum ErrorCode {
    OK = 0;
    INVALID_URL = 1;
    FETCH_ERROR = 2;
    UNSPECIFIED_ERROR = 3;
    RESPONSE_TOO_LARGE = 4;
    DEADLINE_EXCEEDED = 5;
    SSL_CERTIFICATE_ERROR = 6;
    DNS_ERROR = 7;
    CLOSED = 8;
    INTERNAL_TRANSIENT_ERROR = 9;
    TOO_MANY_REDIRECTS = 10;
    MALFORMED_REPLY = 11;
    CONNECTION_ERROR = 12;
  }
}

message URLFetchRequest {
  enum RequestMethod {
    NONE = 0;
    GET = 1;
    POST = 2;
    HEAD = 3;
    PUT = 4;
    DELETE = 5;
    PATCH = 6;
  }
  RequestMethod Method = 1;
  string Url = 2;
  repeated HeaderType Header = 3;
  message HeaderType {
    string Key = 4;
    string Value = 5;
  }
  optional bytes Payload = 6 [ctype=CORD];

  optional bool FollowRedirects = 7 ;

  optional double Deadline = 8;

  optional bool MustValidateServerCertificate = 9 ;
}

message URLFetchResponse {
  optional bytes Content = 1;
  int32 StatusCode = 2;
  repeated HeaderType Header = 3;
  message HeaderType {
    string Key = 4;
    string Value = 5;
  }
  optional bool ContentWasTruncated = 6 ;
  optional int64 ExternalBytesSent = 7;
  optional int64 ExternalBytesReceived = 8;

  optional string FinalUrl = 9;

  optional int64 ApiCpuMilliseconds = 10 ;
  optional int64 ApiBytesSent = 11 ;
  optional int64 ApiBytesReceived = 12 ;
}
