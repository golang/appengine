syntax = "proto3";
option go_package = "google.golang.org/appengine/internal/datastore";

package appengine;

message Action{}

message PropertyValue {
  optional int64 int64Value = 1;
  optional bool booleanValue = 2;
  bytes stringValue = 3;
  optional double doubleValue = 4;

  message PointValueType {
    double x = 1;
    double y = 2;
  }

  optional PointValueType PointValue = 5;

  message UserValueType {
    string email = 9;
    string auth_domain = 10;
    optional string nickname = 11;
    optional string federated_identity = 21;
    optional string federated_provider = 22;
  }
  optional UserValueType UserValue = 8;

  message ReferenceValueType {
    string app = 13;
    optional string name_space = 20;
    message PathElementType {
      string type = 15;
      optional int64 id = 16;
      optional string name = 17;
    }
    repeated PathElementType PathElement = 14;
  }
  optional ReferenceValueType ReferenceValue = 12;
}

message Property {
  enum Meaning {
    NO_MEANING = 0;
    BLOB = 14;
    TEXT = 15;
    BYTESTRING = 16;

    ATOM_CATEGORY = 1;
    ATOM_LINK = 2;
    ATOM_TITLE = 3;
    ATOM_CONTENT = 4;
    ATOM_SUMMARY = 5;
    ATOM_AUTHOR = 6;

    GD_WHEN = 7;
    GD_EMAIL = 8;
    GEORSS_POINT = 9;
    GD_IM = 10;

    GD_PHONENUMBER = 11;
    GD_POSTALADDRESS = 12;

    GD_RATING = 13;

    BLOBKEY = 17;
    ENTITY_PROTO = 19;

    INDEX_VALUE = 18;
  };

  optional Meaning meaning = 1;
  optional string meaning_uri = 2;

  string name = 3;

  PropertyValue value = 5;

  bool multiple = 4;

  optional bool searchable = 6;

  enum FtsTokenizationOption {
    NONE = 0;
    HTML = 1;
    ATOM = 2;
  }

  optional FtsTokenizationOption fts_tokenization_option = 8;

  optional string locale = 9;
}

message Path {
  message ElementType {
    string type = 2;
    optional int64 id = 3;
    optional string name = 4;
  }
  repeated ElementType Element = 1;
}

message Reference {
  string app = 13;
  optional string name_space = 20;
  Path path = 14;
}

message User {
  string email = 1;
  string auth_domain = 2;
  optional string nickname = 3;
  optional string federated_identity = 6;
  optional string federated_provider = 7;
}

message EntityProto {
  Reference key = 13;
  Path entity_group = 16;
  optional User owner = 17;

  enum Kind {
    NONE = 0;
    GD_CONTACT = 1;
    GD_EVENT = 2;
    GD_MESSAGE = 3;
  }
  optional Kind kind = 4;
  optional string kind_uri = 5;

  repeated Property property = 14;
  repeated Property raw_property = 15;

  optional int32 rank = 18;
}

message CompositeProperty {
  int64 index_id = 1;
  repeated string value = 2;
}

message Index {
  string entity_type = 1;
  bool ancestor = 5;
  message PropertyType {
    string name = 3;
    enum Direction {
      NONE = 0;
      ASCENDING = 1;
      DESCENDING = 2;
    }
    optional Direction direction = 4;
  }
  repeated PropertyType Property = 2;
}

message CompositeIndex {
  string app_id = 1;
  int64 id = 2;
  Index definition = 3;

  enum State {
    NONE = 0;
    WRITE_ONLY = 1;
    READ_WRITE = 2;
    DELETED = 3;
    ERROR = 4;
  }
  State state = 4;

  optional bool only_use_if_required = 6;
}

message IndexPostfix {
  message IndexValue {
    string property_name = 1;
    PropertyValue value = 2;
  }

  repeated IndexValue index_value = 1;

  optional Reference key = 2;

  optional bool before = 3;
}

message IndexPosition {
  optional string key = 1;

  optional bool before = 2;
}

message Snapshot {
  enum Status {
    INACTIVE = 0;
    ACTIVE = 1;
  }

  int64 ts = 1;
}

message InternalHeader {
  optional string qos = 1;
}

message Transaction {
  optional InternalHeader header = 4;
  fixed64 handle = 1;
  string app = 2;
  optional bool mark_changes = 3;
}

message Query {
  optional InternalHeader header = 39;

  string app = 1;
  optional string name_space = 29;

  optional string kind = 3;
  optional Reference ancestor = 17;

  message FilterType {
    enum Operator {
      NONE = 0;
      LESS_THAN = 1;
      LESS_THAN_OR_EQUAL = 2;
      GREATER_THAN = 3;
      GREATER_THAN_OR_EQUAL = 4;
      EQUAL = 5;
      IN = 6;
      EXISTS = 7;
    }

    Operator op = 6;
    repeated Property property = 14;
  }
  repeated FilterType Filter = 4;

  optional string search_query = 8;

  repeated OrderType Order = 9;
  message OrderType  {
    enum Direction {
      NONE = 0;
      ASCENDING = 1;
      DESCENDING = 2;
    }

    string property = 10;
    optional Direction direction = 11;
  }

  enum Hint {
    NONE = 0;
    ORDER_FIRST = 1;
    ANCESTOR_FIRST = 2;
    FILTER_FIRST = 3;
  }
  optional Hint hint = 18;

  optional int32 count = 23;

  optional int32 offset = 12;

  optional int32 limit = 16;

  optional CompiledCursor compiled_cursor = 30;
  optional CompiledCursor end_compiled_cursor = 31;

  repeated CompositeIndex composite_index = 19;

  optional bool require_perfect_plan = 20;

  optional bool keys_only = 21;

  optional Transaction transaction = 22;

  optional bool compile = 25;

  optional int64 failover_ms = 26;

  optional bool strong = 32;

  repeated string property_name = 33;

  repeated string group_by_property_name = 34;

  optional bool distinct = 24;

  optional int64 min_safe_time_seconds = 35;

  repeated string safe_replica_name = 36;

  optional bool persist_offset = 37;
}

message CompiledQuery {
  message PrimaryScanType {
    optional string index_name = 2;

    optional string start_key = 3;
    optional bool start_inclusive = 4;
    optional string end_key = 5;
    optional bool end_inclusive = 6;

    repeated string start_postfix_value = 22;
    repeated string end_postfix_value = 23;

    optional int64 end_unapplied_log_timestamp_us = 19;
  }
  PrimaryScanType PrimaryScan = 1;

  message MergeJoinScanType{
    string index_name = 8;

    repeated string prefix_value = 9;

    optional bool value_prefix = 20;
  }
  repeated MergeJoinScanType MergeJoinScan = 7;

  optional Index index_def = 21;

  optional int32 offset = 10;

  optional int32 limit = 11;

  bool keys_only = 12;

  repeated string property_name = 24;

  optional int32 distinct_infix_size = 25;

  message EntityFilterType {
    optional bool distinct = 14;

    optional string kind = 17;
    optional Reference ancestor = 18;
  }
  optional EntityFilterType EntityFilter = 13;
}

message CompiledCursor {
  message PositionType {
    optional string start_key = 27;

    message IndexValueType {
      optional string property = 30;
      PropertyValue value = 31;
    }
    repeated IndexValueType IndexValue = 29;

    optional Reference key = 32;

    optional bool start_inclusive = 28;
  }
  optional PositionType Position = 2;
}

message Cursor {
  fixed64 cursor = 1;

  optional string app = 2;
}

message Error {
  enum ErrorCode {
    NONE = 0;
    BAD_REQUEST = 1;
    CONCURRENT_TRANSACTION = 2;
    INTERNAL_ERROR = 3;
    NEED_INDEX = 4;
    TIMEOUT = 5;
    PERMISSION_DENIED = 6;
    BIGTABLE_ERROR = 7;
    COMMITTED_BUT_STILL_APPLYING = 8;
    CAPABILITY_DISABLED = 9;
    TRY_ALTERNATE_BACKEND = 10;
    SAFE_TIME_TOO_OLD = 11;
  }
}

message Cost {
  optional int32 index_writes = 1;
  optional int32 index_write_bytes = 2;
  optional int32 entity_writes = 3;
  optional int32 entity_write_bytes = 4;
  message CommitCostType {
    optional int32 requested_entity_puts = 6;
    optional int32 requested_entity_deletes = 7;
  };
  optional CommitCostType CommitCost = 5;
  optional int32 approximate_storage_delta = 8;
  optional int32 id_sequence_updates = 9;
}

message GetRequest {
  optional InternalHeader header = 6;

  repeated Reference key = 1;
  optional Transaction transaction = 2;

  optional int64 failover_ms = 3;

  optional bool strong = 4;

  optional bool allow_deferred = 5;
}

message GetResponse {
  message EntityType {
    optional EntityProto entity = 2;
    optional Reference key = 4;

    optional int64 version = 3;
  }
  repeated EntityType Entity = 1;

  repeated Reference deferred = 5;

  optional bool in_order = 6;
}

message PutRequest {
  optional InternalHeader header = 11;

  repeated EntityProto entity = 1;
  optional Transaction transaction = 2;
  repeated CompositeIndex composite_index = 3;

  optional bool trusted = 4;

  optional bool force = 7;

  optional bool mark_changes = 8;
  repeated Snapshot snapshot = 9;

  enum AutoIdPolicy {
    CURRENT = 0;
    SEQUENTIAL = 1;
  }
  optional AutoIdPolicy auto_id_policy = 10;
}

message PutResponse {
  repeated Reference key = 1;
  optional Cost cost = 2;
  repeated int64 version = 3;
}

message TouchRequest {
  optional InternalHeader header = 10;

  repeated Reference key = 1;
  repeated CompositeIndex composite_index = 2;
  optional bool force = 3;
  repeated Snapshot snapshot = 9;
}

message TouchResponse {
  optional Cost cost = 1;
}

message DeleteRequest {
  optional InternalHeader header = 10;

  repeated Reference key = 6;
  optional Transaction transaction = 5;

  optional bool trusted = 4;

  optional bool force = 7;

  optional bool mark_changes = 8;
  repeated Snapshot snapshot = 9;
}

message DeleteResponse {
  optional Cost cost = 1;
  repeated int64 version = 3;
}

message NextRequest {
  optional InternalHeader header = 5;

  Cursor cursor = 1;
  optional int32 count = 2;

  optional int32 offset = 4;

  optional bool compile = 3;
}

message QueryResult {
  optional Cursor cursor = 1;

  repeated EntityProto result = 2;

  optional int32 skipped_results = 7;

  bool more_results = 3;

  optional bool keys_only = 4;

  optional bool index_only = 9;

  optional bool small_ops = 10;

  optional CompiledQuery compiled_query = 5;

  optional CompiledCursor compiled_cursor = 6;

  repeated CompositeIndex index = 8;

  repeated int64 version = 11;
}

message AllocateIdsRequest {
  optional InternalHeader header = 4;

  optional Reference model_key = 1;

  optional int64 size = 2;

  optional int64 max = 3;

  repeated Reference reserve = 5;
}

message AllocateIdsResponse {
  int64 start = 1;
  int64 end = 2;
  optional Cost cost = 3;
}

message CompositeIndices {
  repeated CompositeIndex index = 1;
}

message AddActionsRequest {
  optional InternalHeader header = 3;

  Transaction transaction = 1;
  repeated Action action = 2;
}

message AddActionsResponse {
}

message BeginTransactionRequest {
  optional InternalHeader header = 3;

  string app = 1;
  optional bool allow_multiple_eg = 2;
  optional string database_id = 4;

  enum TransactionMode {
    UNKNOWN = 0;
    READ_ONLY = 1;
    READ_WRITE = 2;
  }
  optional TransactionMode mode = 5;

  optional Transaction previous_transaction = 7;
}

message CommitResponse {
  optional Cost cost = 1;

  message VersionType  {
    Reference root_entity_key = 4;
    int64 version = 5;
  }
  repeated VersionType Version = 3;
}
