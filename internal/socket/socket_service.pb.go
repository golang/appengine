// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: socket_service.proto

package socket

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RemoteSocketServiceError_ErrorCode int32

const (
	RemoteSocketServiceError_NONE              RemoteSocketServiceError_ErrorCode = 0
	RemoteSocketServiceError_SYSTEM_ERROR      RemoteSocketServiceError_ErrorCode = 1
	RemoteSocketServiceError_GAI_ERROR         RemoteSocketServiceError_ErrorCode = 2
	RemoteSocketServiceError_FAILURE           RemoteSocketServiceError_ErrorCode = 4
	RemoteSocketServiceError_PERMISSION_DENIED RemoteSocketServiceError_ErrorCode = 5
	RemoteSocketServiceError_INVALID_REQUEST   RemoteSocketServiceError_ErrorCode = 6
	RemoteSocketServiceError_SOCKET_CLOSED     RemoteSocketServiceError_ErrorCode = 7
)

// Enum value maps for RemoteSocketServiceError_ErrorCode.
var (
	RemoteSocketServiceError_ErrorCode_name = map[int32]string{
		0: "NONE",
		1: "SYSTEM_ERROR",
		2: "GAI_ERROR",
		4: "FAILURE",
		5: "PERMISSION_DENIED",
		6: "INVALID_REQUEST",
		7: "SOCKET_CLOSED",
	}
	RemoteSocketServiceError_ErrorCode_value = map[string]int32{
		"NONE":              0,
		"SYSTEM_ERROR":      1,
		"GAI_ERROR":         2,
		"FAILURE":           4,
		"PERMISSION_DENIED": 5,
		"INVALID_REQUEST":   6,
		"SOCKET_CLOSED":     7,
	}
)

func (x RemoteSocketServiceError_ErrorCode) Enum() *RemoteSocketServiceError_ErrorCode {
	p := new(RemoteSocketServiceError_ErrorCode)
	*p = x
	return p
}

func (x RemoteSocketServiceError_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteSocketServiceError_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[0].Descriptor()
}

func (RemoteSocketServiceError_ErrorCode) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[0]
}

func (x RemoteSocketServiceError_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteSocketServiceError_ErrorCode.Descriptor instead.
func (RemoteSocketServiceError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{0, 0}
}

type RemoteSocketServiceError_SystemError int32

const (
	RemoteSocketServiceError_SYS_SUCCESS         RemoteSocketServiceError_SystemError = 0
	RemoteSocketServiceError_SYS_EPERM           RemoteSocketServiceError_SystemError = 1
	RemoteSocketServiceError_SYS_ENOENT          RemoteSocketServiceError_SystemError = 2
	RemoteSocketServiceError_SYS_ESRCH           RemoteSocketServiceError_SystemError = 3
	RemoteSocketServiceError_SYS_EINTR           RemoteSocketServiceError_SystemError = 4
	RemoteSocketServiceError_SYS_EIO             RemoteSocketServiceError_SystemError = 5
	RemoteSocketServiceError_SYS_ENXIO           RemoteSocketServiceError_SystemError = 6
	RemoteSocketServiceError_SYS_E2BIG           RemoteSocketServiceError_SystemError = 7
	RemoteSocketServiceError_SYS_ENOEXEC         RemoteSocketServiceError_SystemError = 8
	RemoteSocketServiceError_SYS_EBADF           RemoteSocketServiceError_SystemError = 9
	RemoteSocketServiceError_SYS_ECHILD          RemoteSocketServiceError_SystemError = 10
	RemoteSocketServiceError_SYS_EAGAIN          RemoteSocketServiceError_SystemError = 11
	RemoteSocketServiceError_SYS_EWOULDBLOCK     RemoteSocketServiceError_SystemError = 11
	RemoteSocketServiceError_SYS_ENOMEM          RemoteSocketServiceError_SystemError = 12
	RemoteSocketServiceError_SYS_EACCES          RemoteSocketServiceError_SystemError = 13
	RemoteSocketServiceError_SYS_EFAULT          RemoteSocketServiceError_SystemError = 14
	RemoteSocketServiceError_SYS_ENOTBLK         RemoteSocketServiceError_SystemError = 15
	RemoteSocketServiceError_SYS_EBUSY           RemoteSocketServiceError_SystemError = 16
	RemoteSocketServiceError_SYS_EEXIST          RemoteSocketServiceError_SystemError = 17
	RemoteSocketServiceError_SYS_EXDEV           RemoteSocketServiceError_SystemError = 18
	RemoteSocketServiceError_SYS_ENODEV          RemoteSocketServiceError_SystemError = 19
	RemoteSocketServiceError_SYS_ENOTDIR         RemoteSocketServiceError_SystemError = 20
	RemoteSocketServiceError_SYS_EISDIR          RemoteSocketServiceError_SystemError = 21
	RemoteSocketServiceError_SYS_EINVAL          RemoteSocketServiceError_SystemError = 22
	RemoteSocketServiceError_SYS_ENFILE          RemoteSocketServiceError_SystemError = 23
	RemoteSocketServiceError_SYS_EMFILE          RemoteSocketServiceError_SystemError = 24
	RemoteSocketServiceError_SYS_ENOTTY          RemoteSocketServiceError_SystemError = 25
	RemoteSocketServiceError_SYS_ETXTBSY         RemoteSocketServiceError_SystemError = 26
	RemoteSocketServiceError_SYS_EFBIG           RemoteSocketServiceError_SystemError = 27
	RemoteSocketServiceError_SYS_ENOSPC          RemoteSocketServiceError_SystemError = 28
	RemoteSocketServiceError_SYS_ESPIPE          RemoteSocketServiceError_SystemError = 29
	RemoteSocketServiceError_SYS_EROFS           RemoteSocketServiceError_SystemError = 30
	RemoteSocketServiceError_SYS_EMLINK          RemoteSocketServiceError_SystemError = 31
	RemoteSocketServiceError_SYS_EPIPE           RemoteSocketServiceError_SystemError = 32
	RemoteSocketServiceError_SYS_EDOM            RemoteSocketServiceError_SystemError = 33
	RemoteSocketServiceError_SYS_ERANGE          RemoteSocketServiceError_SystemError = 34
	RemoteSocketServiceError_SYS_EDEADLK         RemoteSocketServiceError_SystemError = 35
	RemoteSocketServiceError_SYS_EDEADLOCK       RemoteSocketServiceError_SystemError = 35
	RemoteSocketServiceError_SYS_ENAMETOOLONG    RemoteSocketServiceError_SystemError = 36
	RemoteSocketServiceError_SYS_ENOLCK          RemoteSocketServiceError_SystemError = 37
	RemoteSocketServiceError_SYS_ENOSYS          RemoteSocketServiceError_SystemError = 38
	RemoteSocketServiceError_SYS_ENOTEMPTY       RemoteSocketServiceError_SystemError = 39
	RemoteSocketServiceError_SYS_ELOOP           RemoteSocketServiceError_SystemError = 40
	RemoteSocketServiceError_SYS_ENOMSG          RemoteSocketServiceError_SystemError = 42
	RemoteSocketServiceError_SYS_EIDRM           RemoteSocketServiceError_SystemError = 43
	RemoteSocketServiceError_SYS_ECHRNG          RemoteSocketServiceError_SystemError = 44
	RemoteSocketServiceError_SYS_EL2NSYNC        RemoteSocketServiceError_SystemError = 45
	RemoteSocketServiceError_SYS_EL3HLT          RemoteSocketServiceError_SystemError = 46
	RemoteSocketServiceError_SYS_EL3RST          RemoteSocketServiceError_SystemError = 47
	RemoteSocketServiceError_SYS_ELNRNG          RemoteSocketServiceError_SystemError = 48
	RemoteSocketServiceError_SYS_EUNATCH         RemoteSocketServiceError_SystemError = 49
	RemoteSocketServiceError_SYS_ENOCSI          RemoteSocketServiceError_SystemError = 50
	RemoteSocketServiceError_SYS_EL2HLT          RemoteSocketServiceError_SystemError = 51
	RemoteSocketServiceError_SYS_EBADE           RemoteSocketServiceError_SystemError = 52
	RemoteSocketServiceError_SYS_EBADR           RemoteSocketServiceError_SystemError = 53
	RemoteSocketServiceError_SYS_EXFULL          RemoteSocketServiceError_SystemError = 54
	RemoteSocketServiceError_SYS_ENOANO          RemoteSocketServiceError_SystemError = 55
	RemoteSocketServiceError_SYS_EBADRQC         RemoteSocketServiceError_SystemError = 56
	RemoteSocketServiceError_SYS_EBADSLT         RemoteSocketServiceError_SystemError = 57
	RemoteSocketServiceError_SYS_EBFONT          RemoteSocketServiceError_SystemError = 59
	RemoteSocketServiceError_SYS_ENOSTR          RemoteSocketServiceError_SystemError = 60
	RemoteSocketServiceError_SYS_ENODATA         RemoteSocketServiceError_SystemError = 61
	RemoteSocketServiceError_SYS_ETIME           RemoteSocketServiceError_SystemError = 62
	RemoteSocketServiceError_SYS_ENOSR           RemoteSocketServiceError_SystemError = 63
	RemoteSocketServiceError_SYS_ENONET          RemoteSocketServiceError_SystemError = 64
	RemoteSocketServiceError_SYS_ENOPKG          RemoteSocketServiceError_SystemError = 65
	RemoteSocketServiceError_SYS_EREMOTE         RemoteSocketServiceError_SystemError = 66
	RemoteSocketServiceError_SYS_ENOLINK         RemoteSocketServiceError_SystemError = 67
	RemoteSocketServiceError_SYS_EADV            RemoteSocketServiceError_SystemError = 68
	RemoteSocketServiceError_SYS_ESRMNT          RemoteSocketServiceError_SystemError = 69
	RemoteSocketServiceError_SYS_ECOMM           RemoteSocketServiceError_SystemError = 70
	RemoteSocketServiceError_SYS_EPROTO          RemoteSocketServiceError_SystemError = 71
	RemoteSocketServiceError_SYS_EMULTIHOP       RemoteSocketServiceError_SystemError = 72
	RemoteSocketServiceError_SYS_EDOTDOT         RemoteSocketServiceError_SystemError = 73
	RemoteSocketServiceError_SYS_EBADMSG         RemoteSocketServiceError_SystemError = 74
	RemoteSocketServiceError_SYS_EOVERFLOW       RemoteSocketServiceError_SystemError = 75
	RemoteSocketServiceError_SYS_ENOTUNIQ        RemoteSocketServiceError_SystemError = 76
	RemoteSocketServiceError_SYS_EBADFD          RemoteSocketServiceError_SystemError = 77
	RemoteSocketServiceError_SYS_EREMCHG         RemoteSocketServiceError_SystemError = 78
	RemoteSocketServiceError_SYS_ELIBACC         RemoteSocketServiceError_SystemError = 79
	RemoteSocketServiceError_SYS_ELIBBAD         RemoteSocketServiceError_SystemError = 80
	RemoteSocketServiceError_SYS_ELIBSCN         RemoteSocketServiceError_SystemError = 81
	RemoteSocketServiceError_SYS_ELIBMAX         RemoteSocketServiceError_SystemError = 82
	RemoteSocketServiceError_SYS_ELIBEXEC        RemoteSocketServiceError_SystemError = 83
	RemoteSocketServiceError_SYS_EILSEQ          RemoteSocketServiceError_SystemError = 84
	RemoteSocketServiceError_SYS_ERESTART        RemoteSocketServiceError_SystemError = 85
	RemoteSocketServiceError_SYS_ESTRPIPE        RemoteSocketServiceError_SystemError = 86
	RemoteSocketServiceError_SYS_EUSERS          RemoteSocketServiceError_SystemError = 87
	RemoteSocketServiceError_SYS_ENOTSOCK        RemoteSocketServiceError_SystemError = 88
	RemoteSocketServiceError_SYS_EDESTADDRREQ    RemoteSocketServiceError_SystemError = 89
	RemoteSocketServiceError_SYS_EMSGSIZE        RemoteSocketServiceError_SystemError = 90
	RemoteSocketServiceError_SYS_EPROTOTYPE      RemoteSocketServiceError_SystemError = 91
	RemoteSocketServiceError_SYS_ENOPROTOOPT     RemoteSocketServiceError_SystemError = 92
	RemoteSocketServiceError_SYS_EPROTONOSUPPORT RemoteSocketServiceError_SystemError = 93
	RemoteSocketServiceError_SYS_ESOCKTNOSUPPORT RemoteSocketServiceError_SystemError = 94
	RemoteSocketServiceError_SYS_EOPNOTSUPP      RemoteSocketServiceError_SystemError = 95
	RemoteSocketServiceError_SYS_ENOTSUP         RemoteSocketServiceError_SystemError = 95
	RemoteSocketServiceError_SYS_EPFNOSUPPORT    RemoteSocketServiceError_SystemError = 96
	RemoteSocketServiceError_SYS_EAFNOSUPPORT    RemoteSocketServiceError_SystemError = 97
	RemoteSocketServiceError_SYS_EADDRINUSE      RemoteSocketServiceError_SystemError = 98
	RemoteSocketServiceError_SYS_EADDRNOTAVAIL   RemoteSocketServiceError_SystemError = 99
	RemoteSocketServiceError_SYS_ENETDOWN        RemoteSocketServiceError_SystemError = 100
	RemoteSocketServiceError_SYS_ENETUNREACH     RemoteSocketServiceError_SystemError = 101
	RemoteSocketServiceError_SYS_ENETRESET       RemoteSocketServiceError_SystemError = 102
	RemoteSocketServiceError_SYS_ECONNABORTED    RemoteSocketServiceError_SystemError = 103
	RemoteSocketServiceError_SYS_ECONNRESET      RemoteSocketServiceError_SystemError = 104
	RemoteSocketServiceError_SYS_ENOBUFS         RemoteSocketServiceError_SystemError = 105
	RemoteSocketServiceError_SYS_EISCONN         RemoteSocketServiceError_SystemError = 106
	RemoteSocketServiceError_SYS_ENOTCONN        RemoteSocketServiceError_SystemError = 107
	RemoteSocketServiceError_SYS_ESHUTDOWN       RemoteSocketServiceError_SystemError = 108
	RemoteSocketServiceError_SYS_ETOOMANYREFS    RemoteSocketServiceError_SystemError = 109
	RemoteSocketServiceError_SYS_ETIMEDOUT       RemoteSocketServiceError_SystemError = 110
	RemoteSocketServiceError_SYS_ECONNREFUSED    RemoteSocketServiceError_SystemError = 111
	RemoteSocketServiceError_SYS_EHOSTDOWN       RemoteSocketServiceError_SystemError = 112
	RemoteSocketServiceError_SYS_EHOSTUNREACH    RemoteSocketServiceError_SystemError = 113
	RemoteSocketServiceError_SYS_EALREADY        RemoteSocketServiceError_SystemError = 114
	RemoteSocketServiceError_SYS_EINPROGRESS     RemoteSocketServiceError_SystemError = 115
	RemoteSocketServiceError_SYS_ESTALE          RemoteSocketServiceError_SystemError = 116
	RemoteSocketServiceError_SYS_EUCLEAN         RemoteSocketServiceError_SystemError = 117
	RemoteSocketServiceError_SYS_ENOTNAM         RemoteSocketServiceError_SystemError = 118
	RemoteSocketServiceError_SYS_ENAVAIL         RemoteSocketServiceError_SystemError = 119
	RemoteSocketServiceError_SYS_EISNAM          RemoteSocketServiceError_SystemError = 120
	RemoteSocketServiceError_SYS_EREMOTEIO       RemoteSocketServiceError_SystemError = 121
	RemoteSocketServiceError_SYS_EDQUOT          RemoteSocketServiceError_SystemError = 122
	RemoteSocketServiceError_SYS_ENOMEDIUM       RemoteSocketServiceError_SystemError = 123
	RemoteSocketServiceError_SYS_EMEDIUMTYPE     RemoteSocketServiceError_SystemError = 124
	RemoteSocketServiceError_SYS_ECANCELED       RemoteSocketServiceError_SystemError = 125
	RemoteSocketServiceError_SYS_ENOKEY          RemoteSocketServiceError_SystemError = 126
	RemoteSocketServiceError_SYS_EKEYEXPIRED     RemoteSocketServiceError_SystemError = 127
	RemoteSocketServiceError_SYS_EKEYREVOKED     RemoteSocketServiceError_SystemError = 128
	RemoteSocketServiceError_SYS_EKEYREJECTED    RemoteSocketServiceError_SystemError = 129
	RemoteSocketServiceError_SYS_ENOTRECOVERABLE RemoteSocketServiceError_SystemError = 131
	RemoteSocketServiceError_SYS_ERFKILL         RemoteSocketServiceError_SystemError = 132
)

// Enum value maps for RemoteSocketServiceError_SystemError.
var (
	RemoteSocketServiceError_SystemError_name = map[int32]string{
		0:  "SYS_SUCCESS",
		1:  "SYS_EPERM",
		2:  "SYS_ENOENT",
		3:  "SYS_ESRCH",
		4:  "SYS_EINTR",
		5:  "SYS_EIO",
		6:  "SYS_ENXIO",
		7:  "SYS_E2BIG",
		8:  "SYS_ENOEXEC",
		9:  "SYS_EBADF",
		10: "SYS_ECHILD",
		11: "SYS_EAGAIN",
		// Duplicate value: 11: "SYS_EWOULDBLOCK",
		12: "SYS_ENOMEM",
		13: "SYS_EACCES",
		14: "SYS_EFAULT",
		15: "SYS_ENOTBLK",
		16: "SYS_EBUSY",
		17: "SYS_EEXIST",
		18: "SYS_EXDEV",
		19: "SYS_ENODEV",
		20: "SYS_ENOTDIR",
		21: "SYS_EISDIR",
		22: "SYS_EINVAL",
		23: "SYS_ENFILE",
		24: "SYS_EMFILE",
		25: "SYS_ENOTTY",
		26: "SYS_ETXTBSY",
		27: "SYS_EFBIG",
		28: "SYS_ENOSPC",
		29: "SYS_ESPIPE",
		30: "SYS_EROFS",
		31: "SYS_EMLINK",
		32: "SYS_EPIPE",
		33: "SYS_EDOM",
		34: "SYS_ERANGE",
		35: "SYS_EDEADLK",
		// Duplicate value: 35: "SYS_EDEADLOCK",
		36: "SYS_ENAMETOOLONG",
		37: "SYS_ENOLCK",
		38: "SYS_ENOSYS",
		39: "SYS_ENOTEMPTY",
		40: "SYS_ELOOP",
		42: "SYS_ENOMSG",
		43: "SYS_EIDRM",
		44: "SYS_ECHRNG",
		45: "SYS_EL2NSYNC",
		46: "SYS_EL3HLT",
		47: "SYS_EL3RST",
		48: "SYS_ELNRNG",
		49: "SYS_EUNATCH",
		50: "SYS_ENOCSI",
		51: "SYS_EL2HLT",
		52: "SYS_EBADE",
		53: "SYS_EBADR",
		54: "SYS_EXFULL",
		55: "SYS_ENOANO",
		56: "SYS_EBADRQC",
		57: "SYS_EBADSLT",
		59: "SYS_EBFONT",
		60: "SYS_ENOSTR",
		61: "SYS_ENODATA",
		62: "SYS_ETIME",
		63: "SYS_ENOSR",
		64: "SYS_ENONET",
		65: "SYS_ENOPKG",
		66: "SYS_EREMOTE",
		67: "SYS_ENOLINK",
		68: "SYS_EADV",
		69: "SYS_ESRMNT",
		70: "SYS_ECOMM",
		71: "SYS_EPROTO",
		72: "SYS_EMULTIHOP",
		73: "SYS_EDOTDOT",
		74: "SYS_EBADMSG",
		75: "SYS_EOVERFLOW",
		76: "SYS_ENOTUNIQ",
		77: "SYS_EBADFD",
		78: "SYS_EREMCHG",
		79: "SYS_ELIBACC",
		80: "SYS_ELIBBAD",
		81: "SYS_ELIBSCN",
		82: "SYS_ELIBMAX",
		83: "SYS_ELIBEXEC",
		84: "SYS_EILSEQ",
		85: "SYS_ERESTART",
		86: "SYS_ESTRPIPE",
		87: "SYS_EUSERS",
		88: "SYS_ENOTSOCK",
		89: "SYS_EDESTADDRREQ",
		90: "SYS_EMSGSIZE",
		91: "SYS_EPROTOTYPE",
		92: "SYS_ENOPROTOOPT",
		93: "SYS_EPROTONOSUPPORT",
		94: "SYS_ESOCKTNOSUPPORT",
		95: "SYS_EOPNOTSUPP",
		// Duplicate value: 95: "SYS_ENOTSUP",
		96:  "SYS_EPFNOSUPPORT",
		97:  "SYS_EAFNOSUPPORT",
		98:  "SYS_EADDRINUSE",
		99:  "SYS_EADDRNOTAVAIL",
		100: "SYS_ENETDOWN",
		101: "SYS_ENETUNREACH",
		102: "SYS_ENETRESET",
		103: "SYS_ECONNABORTED",
		104: "SYS_ECONNRESET",
		105: "SYS_ENOBUFS",
		106: "SYS_EISCONN",
		107: "SYS_ENOTCONN",
		108: "SYS_ESHUTDOWN",
		109: "SYS_ETOOMANYREFS",
		110: "SYS_ETIMEDOUT",
		111: "SYS_ECONNREFUSED",
		112: "SYS_EHOSTDOWN",
		113: "SYS_EHOSTUNREACH",
		114: "SYS_EALREADY",
		115: "SYS_EINPROGRESS",
		116: "SYS_ESTALE",
		117: "SYS_EUCLEAN",
		118: "SYS_ENOTNAM",
		119: "SYS_ENAVAIL",
		120: "SYS_EISNAM",
		121: "SYS_EREMOTEIO",
		122: "SYS_EDQUOT",
		123: "SYS_ENOMEDIUM",
		124: "SYS_EMEDIUMTYPE",
		125: "SYS_ECANCELED",
		126: "SYS_ENOKEY",
		127: "SYS_EKEYEXPIRED",
		128: "SYS_EKEYREVOKED",
		129: "SYS_EKEYREJECTED",
		131: "SYS_ENOTRECOVERABLE",
		132: "SYS_ERFKILL",
	}
	RemoteSocketServiceError_SystemError_value = map[string]int32{
		"SYS_SUCCESS":         0,
		"SYS_EPERM":           1,
		"SYS_ENOENT":          2,
		"SYS_ESRCH":           3,
		"SYS_EINTR":           4,
		"SYS_EIO":             5,
		"SYS_ENXIO":           6,
		"SYS_E2BIG":           7,
		"SYS_ENOEXEC":         8,
		"SYS_EBADF":           9,
		"SYS_ECHILD":          10,
		"SYS_EAGAIN":          11,
		"SYS_EWOULDBLOCK":     11,
		"SYS_ENOMEM":          12,
		"SYS_EACCES":          13,
		"SYS_EFAULT":          14,
		"SYS_ENOTBLK":         15,
		"SYS_EBUSY":           16,
		"SYS_EEXIST":          17,
		"SYS_EXDEV":           18,
		"SYS_ENODEV":          19,
		"SYS_ENOTDIR":         20,
		"SYS_EISDIR":          21,
		"SYS_EINVAL":          22,
		"SYS_ENFILE":          23,
		"SYS_EMFILE":          24,
		"SYS_ENOTTY":          25,
		"SYS_ETXTBSY":         26,
		"SYS_EFBIG":           27,
		"SYS_ENOSPC":          28,
		"SYS_ESPIPE":          29,
		"SYS_EROFS":           30,
		"SYS_EMLINK":          31,
		"SYS_EPIPE":           32,
		"SYS_EDOM":            33,
		"SYS_ERANGE":          34,
		"SYS_EDEADLK":         35,
		"SYS_EDEADLOCK":       35,
		"SYS_ENAMETOOLONG":    36,
		"SYS_ENOLCK":          37,
		"SYS_ENOSYS":          38,
		"SYS_ENOTEMPTY":       39,
		"SYS_ELOOP":           40,
		"SYS_ENOMSG":          42,
		"SYS_EIDRM":           43,
		"SYS_ECHRNG":          44,
		"SYS_EL2NSYNC":        45,
		"SYS_EL3HLT":          46,
		"SYS_EL3RST":          47,
		"SYS_ELNRNG":          48,
		"SYS_EUNATCH":         49,
		"SYS_ENOCSI":          50,
		"SYS_EL2HLT":          51,
		"SYS_EBADE":           52,
		"SYS_EBADR":           53,
		"SYS_EXFULL":          54,
		"SYS_ENOANO":          55,
		"SYS_EBADRQC":         56,
		"SYS_EBADSLT":         57,
		"SYS_EBFONT":          59,
		"SYS_ENOSTR":          60,
		"SYS_ENODATA":         61,
		"SYS_ETIME":           62,
		"SYS_ENOSR":           63,
		"SYS_ENONET":          64,
		"SYS_ENOPKG":          65,
		"SYS_EREMOTE":         66,
		"SYS_ENOLINK":         67,
		"SYS_EADV":            68,
		"SYS_ESRMNT":          69,
		"SYS_ECOMM":           70,
		"SYS_EPROTO":          71,
		"SYS_EMULTIHOP":       72,
		"SYS_EDOTDOT":         73,
		"SYS_EBADMSG":         74,
		"SYS_EOVERFLOW":       75,
		"SYS_ENOTUNIQ":        76,
		"SYS_EBADFD":          77,
		"SYS_EREMCHG":         78,
		"SYS_ELIBACC":         79,
		"SYS_ELIBBAD":         80,
		"SYS_ELIBSCN":         81,
		"SYS_ELIBMAX":         82,
		"SYS_ELIBEXEC":        83,
		"SYS_EILSEQ":          84,
		"SYS_ERESTART":        85,
		"SYS_ESTRPIPE":        86,
		"SYS_EUSERS":          87,
		"SYS_ENOTSOCK":        88,
		"SYS_EDESTADDRREQ":    89,
		"SYS_EMSGSIZE":        90,
		"SYS_EPROTOTYPE":      91,
		"SYS_ENOPROTOOPT":     92,
		"SYS_EPROTONOSUPPORT": 93,
		"SYS_ESOCKTNOSUPPORT": 94,
		"SYS_EOPNOTSUPP":      95,
		"SYS_ENOTSUP":         95,
		"SYS_EPFNOSUPPORT":    96,
		"SYS_EAFNOSUPPORT":    97,
		"SYS_EADDRINUSE":      98,
		"SYS_EADDRNOTAVAIL":   99,
		"SYS_ENETDOWN":        100,
		"SYS_ENETUNREACH":     101,
		"SYS_ENETRESET":       102,
		"SYS_ECONNABORTED":    103,
		"SYS_ECONNRESET":      104,
		"SYS_ENOBUFS":         105,
		"SYS_EISCONN":         106,
		"SYS_ENOTCONN":        107,
		"SYS_ESHUTDOWN":       108,
		"SYS_ETOOMANYREFS":    109,
		"SYS_ETIMEDOUT":       110,
		"SYS_ECONNREFUSED":    111,
		"SYS_EHOSTDOWN":       112,
		"SYS_EHOSTUNREACH":    113,
		"SYS_EALREADY":        114,
		"SYS_EINPROGRESS":     115,
		"SYS_ESTALE":          116,
		"SYS_EUCLEAN":         117,
		"SYS_ENOTNAM":         118,
		"SYS_ENAVAIL":         119,
		"SYS_EISNAM":          120,
		"SYS_EREMOTEIO":       121,
		"SYS_EDQUOT":          122,
		"SYS_ENOMEDIUM":       123,
		"SYS_EMEDIUMTYPE":     124,
		"SYS_ECANCELED":       125,
		"SYS_ENOKEY":          126,
		"SYS_EKEYEXPIRED":     127,
		"SYS_EKEYREVOKED":     128,
		"SYS_EKEYREJECTED":    129,
		"SYS_ENOTRECOVERABLE": 131,
		"SYS_ERFKILL":         132,
	}
)

func (x RemoteSocketServiceError_SystemError) Enum() *RemoteSocketServiceError_SystemError {
	p := new(RemoteSocketServiceError_SystemError)
	*p = x
	return p
}

func (x RemoteSocketServiceError_SystemError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteSocketServiceError_SystemError) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[1].Descriptor()
}

func (RemoteSocketServiceError_SystemError) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[1]
}

func (x RemoteSocketServiceError_SystemError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteSocketServiceError_SystemError.Descriptor instead.
func (RemoteSocketServiceError_SystemError) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{0, 1}
}

type CreateSocketRequest_SocketFamily int32

const (
	CreateSocketRequest_NONE CreateSocketRequest_SocketFamily = 0
	CreateSocketRequest_IPv4 CreateSocketRequest_SocketFamily = 1
	CreateSocketRequest_IPv6 CreateSocketRequest_SocketFamily = 2
)

// Enum value maps for CreateSocketRequest_SocketFamily.
var (
	CreateSocketRequest_SocketFamily_name = map[int32]string{
		0: "NONE",
		1: "IPv4",
		2: "IPv6",
	}
	CreateSocketRequest_SocketFamily_value = map[string]int32{
		"NONE": 0,
		"IPv4": 1,
		"IPv6": 2,
	}
)

func (x CreateSocketRequest_SocketFamily) Enum() *CreateSocketRequest_SocketFamily {
	p := new(CreateSocketRequest_SocketFamily)
	*p = x
	return p
}

func (x CreateSocketRequest_SocketFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateSocketRequest_SocketFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[2].Descriptor()
}

func (CreateSocketRequest_SocketFamily) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[2]
}

func (x CreateSocketRequest_SocketFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateSocketRequest_SocketFamily.Descriptor instead.
func (CreateSocketRequest_SocketFamily) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{2, 0}
}

type CreateSocketRequest_SocketProtocol int32

const (
	CreateSocketRequest_SP_NONE CreateSocketRequest_SocketProtocol = 0
	CreateSocketRequest_TCP     CreateSocketRequest_SocketProtocol = 1
	CreateSocketRequest_UDP     CreateSocketRequest_SocketProtocol = 2
)

// Enum value maps for CreateSocketRequest_SocketProtocol.
var (
	CreateSocketRequest_SocketProtocol_name = map[int32]string{
		0: "SP_NONE",
		1: "TCP",
		2: "UDP",
	}
	CreateSocketRequest_SocketProtocol_value = map[string]int32{
		"SP_NONE": 0,
		"TCP":     1,
		"UDP":     2,
	}
)

func (x CreateSocketRequest_SocketProtocol) Enum() *CreateSocketRequest_SocketProtocol {
	p := new(CreateSocketRequest_SocketProtocol)
	*p = x
	return p
}

func (x CreateSocketRequest_SocketProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateSocketRequest_SocketProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[3].Descriptor()
}

func (CreateSocketRequest_SocketProtocol) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[3]
}

func (x CreateSocketRequest_SocketProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateSocketRequest_SocketProtocol.Descriptor instead.
func (CreateSocketRequest_SocketProtocol) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{2, 1}
}

type SocketOption_SocketOptionLevel int32

const (
	SocketOption_SOCKET_SOL_IP     SocketOption_SocketOptionLevel = 0
	SocketOption_SOCKET_SOL_SOCKET SocketOption_SocketOptionLevel = 1
	SocketOption_SOCKET_SOL_TCP    SocketOption_SocketOptionLevel = 6
	SocketOption_SOCKET_SOL_UDP    SocketOption_SocketOptionLevel = 17
)

// Enum value maps for SocketOption_SocketOptionLevel.
var (
	SocketOption_SocketOptionLevel_name = map[int32]string{
		0:  "SOCKET_SOL_IP",
		1:  "SOCKET_SOL_SOCKET",
		6:  "SOCKET_SOL_TCP",
		17: "SOCKET_SOL_UDP",
	}
	SocketOption_SocketOptionLevel_value = map[string]int32{
		"SOCKET_SOL_IP":     0,
		"SOCKET_SOL_SOCKET": 1,
		"SOCKET_SOL_TCP":    6,
		"SOCKET_SOL_UDP":    17,
	}
)

func (x SocketOption_SocketOptionLevel) Enum() *SocketOption_SocketOptionLevel {
	p := new(SocketOption_SocketOptionLevel)
	*p = x
	return p
}

func (x SocketOption_SocketOptionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketOption_SocketOptionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[4].Descriptor()
}

func (SocketOption_SocketOptionLevel) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[4]
}

func (x SocketOption_SocketOptionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocketOption_SocketOptionLevel.Descriptor instead.
func (SocketOption_SocketOptionLevel) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{10, 0}
}

type SocketOption_SocketOptionName int32

const (
	SocketOption_SOP_NONE                SocketOption_SocketOptionName = 0
	SocketOption_SOCKET_SO_DEBUG         SocketOption_SocketOptionName = 1
	SocketOption_SOCKET_SO_REUSEADDR     SocketOption_SocketOptionName = 2
	SocketOption_SOCKET_SO_TYPE          SocketOption_SocketOptionName = 3
	SocketOption_SOCKET_SO_ERROR         SocketOption_SocketOptionName = 4
	SocketOption_SOCKET_SO_DONTROUTE     SocketOption_SocketOptionName = 5
	SocketOption_SOCKET_SO_BROADCAST     SocketOption_SocketOptionName = 6
	SocketOption_SOCKET_SO_SNDBUF        SocketOption_SocketOptionName = 7
	SocketOption_SOCKET_SO_RCVBUF        SocketOption_SocketOptionName = 8
	SocketOption_SOCKET_SO_KEEPALIVE     SocketOption_SocketOptionName = 9
	SocketOption_SOCKET_SO_OOBINLINE     SocketOption_SocketOptionName = 10
	SocketOption_SOCKET_SO_LINGER        SocketOption_SocketOptionName = 13
	SocketOption_SOCKET_SO_RCVTIMEO      SocketOption_SocketOptionName = 20
	SocketOption_SOCKET_SO_SNDTIMEO      SocketOption_SocketOptionName = 21
	SocketOption_SOCKET_IP_TOS           SocketOption_SocketOptionName = 1
	SocketOption_SOCKET_IP_TTL           SocketOption_SocketOptionName = 2
	SocketOption_SOCKET_IP_HDRINCL       SocketOption_SocketOptionName = 3
	SocketOption_SOCKET_IP_OPTIONS       SocketOption_SocketOptionName = 4
	SocketOption_SOCKET_TCP_NODELAY      SocketOption_SocketOptionName = 1
	SocketOption_SOCKET_TCP_MAXSEG       SocketOption_SocketOptionName = 2
	SocketOption_SOCKET_TCP_CORK         SocketOption_SocketOptionName = 3
	SocketOption_SOCKET_TCP_KEEPIDLE     SocketOption_SocketOptionName = 4
	SocketOption_SOCKET_TCP_KEEPINTVL    SocketOption_SocketOptionName = 5
	SocketOption_SOCKET_TCP_KEEPCNT      SocketOption_SocketOptionName = 6
	SocketOption_SOCKET_TCP_SYNCNT       SocketOption_SocketOptionName = 7
	SocketOption_SOCKET_TCP_LINGER2      SocketOption_SocketOptionName = 8
	SocketOption_SOCKET_TCP_DEFER_ACCEPT SocketOption_SocketOptionName = 9
	SocketOption_SOCKET_TCP_WINDOW_CLAMP SocketOption_SocketOptionName = 10
	SocketOption_SOCKET_TCP_INFO         SocketOption_SocketOptionName = 11
	SocketOption_SOCKET_TCP_QUICKACK     SocketOption_SocketOptionName = 12
)

// Enum value maps for SocketOption_SocketOptionName.
var (
	SocketOption_SocketOptionName_name = map[int32]string{
		0:  "SOP_NONE",
		1:  "SOCKET_SO_DEBUG",
		2:  "SOCKET_SO_REUSEADDR",
		3:  "SOCKET_SO_TYPE",
		4:  "SOCKET_SO_ERROR",
		5:  "SOCKET_SO_DONTROUTE",
		6:  "SOCKET_SO_BROADCAST",
		7:  "SOCKET_SO_SNDBUF",
		8:  "SOCKET_SO_RCVBUF",
		9:  "SOCKET_SO_KEEPALIVE",
		10: "SOCKET_SO_OOBINLINE",
		13: "SOCKET_SO_LINGER",
		20: "SOCKET_SO_RCVTIMEO",
		21: "SOCKET_SO_SNDTIMEO",
		// Duplicate value: 1: "SOCKET_IP_TOS",
		// Duplicate value: 2: "SOCKET_IP_TTL",
		// Duplicate value: 3: "SOCKET_IP_HDRINCL",
		// Duplicate value: 4: "SOCKET_IP_OPTIONS",
		// Duplicate value: 1: "SOCKET_TCP_NODELAY",
		// Duplicate value: 2: "SOCKET_TCP_MAXSEG",
		// Duplicate value: 3: "SOCKET_TCP_CORK",
		// Duplicate value: 4: "SOCKET_TCP_KEEPIDLE",
		// Duplicate value: 5: "SOCKET_TCP_KEEPINTVL",
		// Duplicate value: 6: "SOCKET_TCP_KEEPCNT",
		// Duplicate value: 7: "SOCKET_TCP_SYNCNT",
		// Duplicate value: 8: "SOCKET_TCP_LINGER2",
		// Duplicate value: 9: "SOCKET_TCP_DEFER_ACCEPT",
		// Duplicate value: 10: "SOCKET_TCP_WINDOW_CLAMP",
		11: "SOCKET_TCP_INFO",
		12: "SOCKET_TCP_QUICKACK",
	}
	SocketOption_SocketOptionName_value = map[string]int32{
		"SOP_NONE":                0,
		"SOCKET_SO_DEBUG":         1,
		"SOCKET_SO_REUSEADDR":     2,
		"SOCKET_SO_TYPE":          3,
		"SOCKET_SO_ERROR":         4,
		"SOCKET_SO_DONTROUTE":     5,
		"SOCKET_SO_BROADCAST":     6,
		"SOCKET_SO_SNDBUF":        7,
		"SOCKET_SO_RCVBUF":        8,
		"SOCKET_SO_KEEPALIVE":     9,
		"SOCKET_SO_OOBINLINE":     10,
		"SOCKET_SO_LINGER":        13,
		"SOCKET_SO_RCVTIMEO":      20,
		"SOCKET_SO_SNDTIMEO":      21,
		"SOCKET_IP_TOS":           1,
		"SOCKET_IP_TTL":           2,
		"SOCKET_IP_HDRINCL":       3,
		"SOCKET_IP_OPTIONS":       4,
		"SOCKET_TCP_NODELAY":      1,
		"SOCKET_TCP_MAXSEG":       2,
		"SOCKET_TCP_CORK":         3,
		"SOCKET_TCP_KEEPIDLE":     4,
		"SOCKET_TCP_KEEPINTVL":    5,
		"SOCKET_TCP_KEEPCNT":      6,
		"SOCKET_TCP_SYNCNT":       7,
		"SOCKET_TCP_LINGER2":      8,
		"SOCKET_TCP_DEFER_ACCEPT": 9,
		"SOCKET_TCP_WINDOW_CLAMP": 10,
		"SOCKET_TCP_INFO":         11,
		"SOCKET_TCP_QUICKACK":     12,
	}
)

func (x SocketOption_SocketOptionName) Enum() *SocketOption_SocketOptionName {
	p := new(SocketOption_SocketOptionName)
	*p = x
	return p
}

func (x SocketOption_SocketOptionName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketOption_SocketOptionName) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[5].Descriptor()
}

func (SocketOption_SocketOptionName) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[5]
}

func (x SocketOption_SocketOptionName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocketOption_SocketOptionName.Descriptor instead.
func (SocketOption_SocketOptionName) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{10, 1}
}

type ShutDownRequest_How int32

const (
	ShutDownRequest_NONE             ShutDownRequest_How = 0
	ShutDownRequest_SOCKET_SHUT_RD   ShutDownRequest_How = 1
	ShutDownRequest_SOCKET_SHUT_WR   ShutDownRequest_How = 2
	ShutDownRequest_SOCKET_SHUT_RDWR ShutDownRequest_How = 3
)

// Enum value maps for ShutDownRequest_How.
var (
	ShutDownRequest_How_name = map[int32]string{
		0: "NONE",
		1: "SOCKET_SHUT_RD",
		2: "SOCKET_SHUT_WR",
		3: "SOCKET_SHUT_RDWR",
	}
	ShutDownRequest_How_value = map[string]int32{
		"NONE":             0,
		"SOCKET_SHUT_RD":   1,
		"SOCKET_SHUT_WR":   2,
		"SOCKET_SHUT_RDWR": 3,
	}
)

func (x ShutDownRequest_How) Enum() *ShutDownRequest_How {
	p := new(ShutDownRequest_How)
	*p = x
	return p
}

func (x ShutDownRequest_How) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShutDownRequest_How) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[6].Descriptor()
}

func (ShutDownRequest_How) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[6]
}

func (x ShutDownRequest_How) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShutDownRequest_How.Descriptor instead.
func (ShutDownRequest_How) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{21, 0}
}

type ReceiveRequest_Flags int32

const (
	ReceiveRequest_NONE     ReceiveRequest_Flags = 0
	ReceiveRequest_MSG_OOB  ReceiveRequest_Flags = 1
	ReceiveRequest_MSG_PEEK ReceiveRequest_Flags = 2
)

// Enum value maps for ReceiveRequest_Flags.
var (
	ReceiveRequest_Flags_name = map[int32]string{
		0: "NONE",
		1: "MSG_OOB",
		2: "MSG_PEEK",
	}
	ReceiveRequest_Flags_value = map[string]int32{
		"NONE":     0,
		"MSG_OOB":  1,
		"MSG_PEEK": 2,
	}
)

func (x ReceiveRequest_Flags) Enum() *ReceiveRequest_Flags {
	p := new(ReceiveRequest_Flags)
	*p = x
	return p
}

func (x ReceiveRequest_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiveRequest_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[7].Descriptor()
}

func (ReceiveRequest_Flags) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[7]
}

func (x ReceiveRequest_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiveRequest_Flags.Descriptor instead.
func (ReceiveRequest_Flags) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{27, 0}
}

type PollEvent_PollEventFlag int32

const (
	PollEvent_SOCKET_POLLNONE   PollEvent_PollEventFlag = 0
	PollEvent_SOCKET_POLLIN     PollEvent_PollEventFlag = 1
	PollEvent_SOCKET_POLLPRI    PollEvent_PollEventFlag = 2
	PollEvent_SOCKET_POLLOUT    PollEvent_PollEventFlag = 4
	PollEvent_SOCKET_POLLERR    PollEvent_PollEventFlag = 8
	PollEvent_SOCKET_POLLHUP    PollEvent_PollEventFlag = 16
	PollEvent_SOCKET_POLLNVAL   PollEvent_PollEventFlag = 32
	PollEvent_SOCKET_POLLRDNORM PollEvent_PollEventFlag = 64
	PollEvent_SOCKET_POLLRDBAND PollEvent_PollEventFlag = 128
	PollEvent_SOCKET_POLLWRNORM PollEvent_PollEventFlag = 256
	PollEvent_SOCKET_POLLWRBAND PollEvent_PollEventFlag = 512
	PollEvent_SOCKET_POLLMSG    PollEvent_PollEventFlag = 1024
	PollEvent_SOCKET_POLLREMOVE PollEvent_PollEventFlag = 4096
	PollEvent_SOCKET_POLLRDHUP  PollEvent_PollEventFlag = 8192
)

// Enum value maps for PollEvent_PollEventFlag.
var (
	PollEvent_PollEventFlag_name = map[int32]string{
		0:    "SOCKET_POLLNONE",
		1:    "SOCKET_POLLIN",
		2:    "SOCKET_POLLPRI",
		4:    "SOCKET_POLLOUT",
		8:    "SOCKET_POLLERR",
		16:   "SOCKET_POLLHUP",
		32:   "SOCKET_POLLNVAL",
		64:   "SOCKET_POLLRDNORM",
		128:  "SOCKET_POLLRDBAND",
		256:  "SOCKET_POLLWRNORM",
		512:  "SOCKET_POLLWRBAND",
		1024: "SOCKET_POLLMSG",
		4096: "SOCKET_POLLREMOVE",
		8192: "SOCKET_POLLRDHUP",
	}
	PollEvent_PollEventFlag_value = map[string]int32{
		"SOCKET_POLLNONE":   0,
		"SOCKET_POLLIN":     1,
		"SOCKET_POLLPRI":    2,
		"SOCKET_POLLOUT":    4,
		"SOCKET_POLLERR":    8,
		"SOCKET_POLLHUP":    16,
		"SOCKET_POLLNVAL":   32,
		"SOCKET_POLLRDNORM": 64,
		"SOCKET_POLLRDBAND": 128,
		"SOCKET_POLLWRNORM": 256,
		"SOCKET_POLLWRBAND": 512,
		"SOCKET_POLLMSG":    1024,
		"SOCKET_POLLREMOVE": 4096,
		"SOCKET_POLLRDHUP":  8192,
	}
)

func (x PollEvent_PollEventFlag) Enum() *PollEvent_PollEventFlag {
	p := new(PollEvent_PollEventFlag)
	*p = x
	return p
}

func (x PollEvent_PollEventFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PollEvent_PollEventFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[8].Descriptor()
}

func (PollEvent_PollEventFlag) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[8]
}

func (x PollEvent_PollEventFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PollEvent_PollEventFlag.Descriptor instead.
func (PollEvent_PollEventFlag) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{29, 0}
}

type ResolveReply_ErrorCode int32

const (
	ResolveReply_NONE                  ResolveReply_ErrorCode = 0
	ResolveReply_SOCKET_EAI_ADDRFAMILY ResolveReply_ErrorCode = 1
	ResolveReply_SOCKET_EAI_AGAIN      ResolveReply_ErrorCode = 2
	ResolveReply_SOCKET_EAI_BADFLAGS   ResolveReply_ErrorCode = 3
	ResolveReply_SOCKET_EAI_FAIL       ResolveReply_ErrorCode = 4
	ResolveReply_SOCKET_EAI_FAMILY     ResolveReply_ErrorCode = 5
	ResolveReply_SOCKET_EAI_MEMORY     ResolveReply_ErrorCode = 6
	ResolveReply_SOCKET_EAI_NODATA     ResolveReply_ErrorCode = 7
	ResolveReply_SOCKET_EAI_NONAME     ResolveReply_ErrorCode = 8
	ResolveReply_SOCKET_EAI_SERVICE    ResolveReply_ErrorCode = 9
	ResolveReply_SOCKET_EAI_SOCKTYPE   ResolveReply_ErrorCode = 10
	ResolveReply_SOCKET_EAI_SYSTEM     ResolveReply_ErrorCode = 11
	ResolveReply_SOCKET_EAI_BADHINTS   ResolveReply_ErrorCode = 12
	ResolveReply_SOCKET_EAI_PROTOCOL   ResolveReply_ErrorCode = 13
	ResolveReply_SOCKET_EAI_OVERFLOW   ResolveReply_ErrorCode = 14
	ResolveReply_SOCKET_EAI_MAX        ResolveReply_ErrorCode = 15
)

// Enum value maps for ResolveReply_ErrorCode.
var (
	ResolveReply_ErrorCode_name = map[int32]string{
		0:  "NONE",
		1:  "SOCKET_EAI_ADDRFAMILY",
		2:  "SOCKET_EAI_AGAIN",
		3:  "SOCKET_EAI_BADFLAGS",
		4:  "SOCKET_EAI_FAIL",
		5:  "SOCKET_EAI_FAMILY",
		6:  "SOCKET_EAI_MEMORY",
		7:  "SOCKET_EAI_NODATA",
		8:  "SOCKET_EAI_NONAME",
		9:  "SOCKET_EAI_SERVICE",
		10: "SOCKET_EAI_SOCKTYPE",
		11: "SOCKET_EAI_SYSTEM",
		12: "SOCKET_EAI_BADHINTS",
		13: "SOCKET_EAI_PROTOCOL",
		14: "SOCKET_EAI_OVERFLOW",
		15: "SOCKET_EAI_MAX",
	}
	ResolveReply_ErrorCode_value = map[string]int32{
		"NONE":                  0,
		"SOCKET_EAI_ADDRFAMILY": 1,
		"SOCKET_EAI_AGAIN":      2,
		"SOCKET_EAI_BADFLAGS":   3,
		"SOCKET_EAI_FAIL":       4,
		"SOCKET_EAI_FAMILY":     5,
		"SOCKET_EAI_MEMORY":     6,
		"SOCKET_EAI_NODATA":     7,
		"SOCKET_EAI_NONAME":     8,
		"SOCKET_EAI_SERVICE":    9,
		"SOCKET_EAI_SOCKTYPE":   10,
		"SOCKET_EAI_SYSTEM":     11,
		"SOCKET_EAI_BADHINTS":   12,
		"SOCKET_EAI_PROTOCOL":   13,
		"SOCKET_EAI_OVERFLOW":   14,
		"SOCKET_EAI_MAX":        15,
	}
)

func (x ResolveReply_ErrorCode) Enum() *ResolveReply_ErrorCode {
	p := new(ResolveReply_ErrorCode)
	*p = x
	return p
}

func (x ResolveReply_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveReply_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_service_proto_enumTypes[9].Descriptor()
}

func (ResolveReply_ErrorCode) Type() protoreflect.EnumType {
	return &file_socket_service_proto_enumTypes[9]
}

func (x ResolveReply_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveReply_ErrorCode.Descriptor instead.
func (ResolveReply_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{33, 0}
}

type RemoteSocketServiceError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemError *int32  `protobuf:"varint,1,opt,name=system_error,json=systemError,proto3,oneof" json:"system_error,omitempty"`
	ErrorDetail *string `protobuf:"bytes,2,opt,name=error_detail,json=errorDetail,proto3,oneof" json:"error_detail,omitempty"`
}

func (x *RemoteSocketServiceError) Reset() {
	*x = RemoteSocketServiceError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteSocketServiceError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteSocketServiceError) ProtoMessage() {}

func (x *RemoteSocketServiceError) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteSocketServiceError.ProtoReflect.Descriptor instead.
func (*RemoteSocketServiceError) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{0}
}

func (x *RemoteSocketServiceError) GetSystemError() int32 {
	if x != nil && x.SystemError != nil {
		return *x.SystemError
	}
	return 0
}

func (x *RemoteSocketServiceError) GetErrorDetail() string {
	if x != nil && x.ErrorDetail != nil {
		return *x.ErrorDetail
	}
	return ""
}

type AddressPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          int32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	PackedAddress []byte  `protobuf:"bytes,2,opt,name=packed_address,json=packedAddress,proto3,oneof" json:"packed_address,omitempty"`
	HostnameHint  *string `protobuf:"bytes,3,opt,name=hostname_hint,json=hostnameHint,proto3,oneof" json:"hostname_hint,omitempty"`
}

func (x *AddressPort) Reset() {
	*x = AddressPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPort) ProtoMessage() {}

func (x *AddressPort) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPort.ProtoReflect.Descriptor instead.
func (*AddressPort) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddressPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddressPort) GetPackedAddress() []byte {
	if x != nil {
		return x.PackedAddress
	}
	return nil
}

func (x *AddressPort) GetHostnameHint() string {
	if x != nil && x.HostnameHint != nil {
		return *x.HostnameHint
	}
	return ""
}

type CreateSocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family          CreateSocketRequest_SocketFamily   `protobuf:"varint,1,opt,name=family,proto3,enum=appengine.CreateSocketRequest_SocketFamily" json:"family,omitempty"`
	Protocol        CreateSocketRequest_SocketProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=appengine.CreateSocketRequest_SocketProtocol" json:"protocol,omitempty"`
	SocketOptions   []*SocketOption                    `protobuf:"bytes,3,rep,name=socket_options,json=socketOptions,proto3" json:"socket_options,omitempty"`
	ProxyExternalIp *AddressPort                       `protobuf:"bytes,4,opt,name=proxy_external_ip,json=proxyExternalIp,proto3,oneof" json:"proxy_external_ip,omitempty"`
	ListenBacklog   *int32                             `protobuf:"varint,5,opt,name=listen_backlog,json=listenBacklog,proto3,oneof" json:"listen_backlog,omitempty"`
	RemoteIp        *AddressPort                       `protobuf:"bytes,6,opt,name=remote_ip,json=remoteIp,proto3,oneof" json:"remote_ip,omitempty"`
	AppId           *string                            `protobuf:"bytes,9,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	ProjectId       *int64                             `protobuf:"varint,10,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
}

func (x *CreateSocketRequest) Reset() {
	*x = CreateSocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSocketRequest) ProtoMessage() {}

func (x *CreateSocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSocketRequest.ProtoReflect.Descriptor instead.
func (*CreateSocketRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSocketRequest) GetFamily() CreateSocketRequest_SocketFamily {
	if x != nil {
		return x.Family
	}
	return CreateSocketRequest_NONE
}

func (x *CreateSocketRequest) GetProtocol() CreateSocketRequest_SocketProtocol {
	if x != nil {
		return x.Protocol
	}
	return CreateSocketRequest_SP_NONE
}

func (x *CreateSocketRequest) GetSocketOptions() []*SocketOption {
	if x != nil {
		return x.SocketOptions
	}
	return nil
}

func (x *CreateSocketRequest) GetProxyExternalIp() *AddressPort {
	if x != nil {
		return x.ProxyExternalIp
	}
	return nil
}

func (x *CreateSocketRequest) GetListenBacklog() int32 {
	if x != nil && x.ListenBacklog != nil {
		return *x.ListenBacklog
	}
	return 0
}

func (x *CreateSocketRequest) GetRemoteIp() *AddressPort {
	if x != nil {
		return x.RemoteIp
	}
	return nil
}

func (x *CreateSocketRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *CreateSocketRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

type CreateSocketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor *string      `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3,oneof" json:"socket_descriptor,omitempty"`
	ServerAddress    *AddressPort `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3,oneof" json:"server_address,omitempty"`
	ProxyExternalIp  *AddressPort `protobuf:"bytes,4,opt,name=proxy_external_ip,json=proxyExternalIp,proto3,oneof" json:"proxy_external_ip,omitempty"`
}

func (x *CreateSocketReply) Reset() {
	*x = CreateSocketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSocketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSocketReply) ProtoMessage() {}

func (x *CreateSocketReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSocketReply.ProtoReflect.Descriptor instead.
func (*CreateSocketReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSocketReply) GetSocketDescriptor() string {
	if x != nil && x.SocketDescriptor != nil {
		return *x.SocketDescriptor
	}
	return ""
}

func (x *CreateSocketReply) GetServerAddress() *AddressPort {
	if x != nil {
		return x.ServerAddress
	}
	return nil
}

func (x *CreateSocketReply) GetProxyExternalIp() *AddressPort {
	if x != nil {
		return x.ProxyExternalIp
	}
	return nil
}

type BindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string       `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	ProxyExternalIp  *AddressPort `protobuf:"bytes,2,opt,name=proxy_external_ip,json=proxyExternalIp,proto3" json:"proxy_external_ip,omitempty"`
}

func (x *BindRequest) Reset() {
	*x = BindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindRequest) ProtoMessage() {}

func (x *BindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindRequest.ProtoReflect.Descriptor instead.
func (*BindRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{4}
}

func (x *BindRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *BindRequest) GetProxyExternalIp() *AddressPort {
	if x != nil {
		return x.ProxyExternalIp
	}
	return nil
}

type BindReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyExternalIp *AddressPort `protobuf:"bytes,1,opt,name=proxy_external_ip,json=proxyExternalIp,proto3,oneof" json:"proxy_external_ip,omitempty"`
}

func (x *BindReply) Reset() {
	*x = BindReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindReply) ProtoMessage() {}

func (x *BindReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindReply.ProtoReflect.Descriptor instead.
func (*BindReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{5}
}

func (x *BindReply) GetProxyExternalIp() *AddressPort {
	if x != nil {
		return x.ProxyExternalIp
	}
	return nil
}

type GetSocketNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
}

func (x *GetSocketNameRequest) Reset() {
	*x = GetSocketNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocketNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocketNameRequest) ProtoMessage() {}

func (x *GetSocketNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocketNameRequest.ProtoReflect.Descriptor instead.
func (*GetSocketNameRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetSocketNameRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

type GetSocketNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyExternalIp *AddressPort `protobuf:"bytes,2,opt,name=proxy_external_ip,json=proxyExternalIp,proto3,oneof" json:"proxy_external_ip,omitempty"`
}

func (x *GetSocketNameReply) Reset() {
	*x = GetSocketNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocketNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocketNameReply) ProtoMessage() {}

func (x *GetSocketNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocketNameReply.ProtoReflect.Descriptor instead.
func (*GetSocketNameReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetSocketNameReply) GetProxyExternalIp() *AddressPort {
	if x != nil {
		return x.ProxyExternalIp
	}
	return nil
}

type GetPeerNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
}

func (x *GetPeerNameRequest) Reset() {
	*x = GetPeerNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeerNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerNameRequest) ProtoMessage() {}

func (x *GetPeerNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerNameRequest.ProtoReflect.Descriptor instead.
func (*GetPeerNameRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetPeerNameRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

type GetPeerNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp *AddressPort `protobuf:"bytes,2,opt,name=peer_ip,json=peerIp,proto3,oneof" json:"peer_ip,omitempty"`
}

func (x *GetPeerNameReply) Reset() {
	*x = GetPeerNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeerNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerNameReply) ProtoMessage() {}

func (x *GetPeerNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerNameReply.ProtoReflect.Descriptor instead.
func (*GetPeerNameReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetPeerNameReply) GetPeerIp() *AddressPort {
	if x != nil {
		return x.PeerIp
	}
	return nil
}

type SocketOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  SocketOption_SocketOptionLevel `protobuf:"varint,1,opt,name=level,proto3,enum=appengine.SocketOption_SocketOptionLevel" json:"level,omitempty"`
	Option SocketOption_SocketOptionName  `protobuf:"varint,2,opt,name=option,proto3,enum=appengine.SocketOption_SocketOptionName" json:"option,omitempty"`
	Value  []byte                         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SocketOption) Reset() {
	*x = SocketOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketOption) ProtoMessage() {}

func (x *SocketOption) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketOption.ProtoReflect.Descriptor instead.
func (*SocketOption) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{10}
}

func (x *SocketOption) GetLevel() SocketOption_SocketOptionLevel {
	if x != nil {
		return x.Level
	}
	return SocketOption_SOCKET_SOL_IP
}

func (x *SocketOption) GetOption() SocketOption_SocketOptionName {
	if x != nil {
		return x.Option
	}
	return SocketOption_SOP_NONE
}

func (x *SocketOption) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetSocketOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string          `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	Options          []*SocketOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *SetSocketOptionsRequest) Reset() {
	*x = SetSocketOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSocketOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSocketOptionsRequest) ProtoMessage() {}

func (x *SetSocketOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSocketOptionsRequest.ProtoReflect.Descriptor instead.
func (*SetSocketOptionsRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{11}
}

func (x *SetSocketOptionsRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *SetSocketOptionsRequest) GetOptions() []*SocketOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type SetSocketOptionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSocketOptionsReply) Reset() {
	*x = SetSocketOptionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSocketOptionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSocketOptionsReply) ProtoMessage() {}

func (x *SetSocketOptionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSocketOptionsReply.ProtoReflect.Descriptor instead.
func (*SetSocketOptionsReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{12}
}

type GetSocketOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string          `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	Options          []*SocketOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *GetSocketOptionsRequest) Reset() {
	*x = GetSocketOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocketOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocketOptionsRequest) ProtoMessage() {}

func (x *GetSocketOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocketOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetSocketOptionsRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetSocketOptionsRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *GetSocketOptionsRequest) GetOptions() []*SocketOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetSocketOptionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*SocketOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *GetSocketOptionsReply) Reset() {
	*x = GetSocketOptionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocketOptionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocketOptionsReply) ProtoMessage() {}

func (x *GetSocketOptionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocketOptionsReply.ProtoReflect.Descriptor instead.
func (*GetSocketOptionsReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetSocketOptionsReply) GetOptions() []*SocketOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string       `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	RemoteIp         *AddressPort `protobuf:"bytes,2,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	TimeoutSeconds   *float64     `protobuf:"fixed64,3,opt,name=timeout_seconds,json=timeoutSeconds,proto3,oneof" json:"timeout_seconds,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{15}
}

func (x *ConnectRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *ConnectRequest) GetRemoteIp() *AddressPort {
	if x != nil {
		return x.RemoteIp
	}
	return nil
}

func (x *ConnectRequest) GetTimeoutSeconds() float64 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

type ConnectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyExternalIp *AddressPort `protobuf:"bytes,1,opt,name=proxy_external_ip,json=proxyExternalIp,proto3,oneof" json:"proxy_external_ip,omitempty"`
}

func (x *ConnectReply) Reset() {
	*x = ConnectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectReply) ProtoMessage() {}

func (x *ConnectReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectReply.ProtoReflect.Descriptor instead.
func (*ConnectReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{16}
}

func (x *ConnectReply) GetProxyExternalIp() *AddressPort {
	if x != nil {
		return x.ProxyExternalIp
	}
	return nil
}

type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	Backlog          int32  `protobuf:"varint,2,opt,name=backlog,proto3" json:"backlog,omitempty"`
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListenRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *ListenRequest) GetBacklog() int32 {
	if x != nil {
		return x.Backlog
	}
	return 0
}

type ListenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListenReply) Reset() {
	*x = ListenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenReply) ProtoMessage() {}

func (x *ListenReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenReply.ProtoReflect.Descriptor instead.
func (*ListenReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{18}
}

type AcceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string   `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	TimeoutSeconds   *float64 `protobuf:"fixed64,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3,oneof" json:"timeout_seconds,omitempty"`
}

func (x *AcceptRequest) Reset() {
	*x = AcceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptRequest) ProtoMessage() {}

func (x *AcceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptRequest.ProtoReflect.Descriptor instead.
func (*AcceptRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{19}
}

func (x *AcceptRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *AcceptRequest) GetTimeoutSeconds() float64 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

type AcceptReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewSocketDescriptor []byte       `protobuf:"bytes,2,opt,name=new_socket_descriptor,json=newSocketDescriptor,proto3,oneof" json:"new_socket_descriptor,omitempty"`
	RemoteAddress       *AddressPort `protobuf:"bytes,3,opt,name=remote_address,json=remoteAddress,proto3,oneof" json:"remote_address,omitempty"`
}

func (x *AcceptReply) Reset() {
	*x = AcceptReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptReply) ProtoMessage() {}

func (x *AcceptReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptReply.ProtoReflect.Descriptor instead.
func (*AcceptReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{20}
}

func (x *AcceptReply) GetNewSocketDescriptor() []byte {
	if x != nil {
		return x.NewSocketDescriptor
	}
	return nil
}

func (x *AcceptReply) GetRemoteAddress() *AddressPort {
	if x != nil {
		return x.RemoteAddress
	}
	return nil
}

type ShutDownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string              `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	How              ShutDownRequest_How `protobuf:"varint,2,opt,name=how,proto3,enum=appengine.ShutDownRequest_How" json:"how,omitempty"`
	SendOffset       int64               `protobuf:"varint,3,opt,name=send_offset,json=sendOffset,proto3" json:"send_offset,omitempty"`
}

func (x *ShutDownRequest) Reset() {
	*x = ShutDownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutDownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutDownRequest) ProtoMessage() {}

func (x *ShutDownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutDownRequest.ProtoReflect.Descriptor instead.
func (*ShutDownRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{21}
}

func (x *ShutDownRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *ShutDownRequest) GetHow() ShutDownRequest_How {
	if x != nil {
		return x.How
	}
	return ShutDownRequest_NONE
}

func (x *ShutDownRequest) GetSendOffset() int64 {
	if x != nil {
		return x.SendOffset
	}
	return 0
}

type ShutDownReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutDownReply) Reset() {
	*x = ShutDownReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutDownReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutDownReply) ProtoMessage() {}

func (x *ShutDownReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutDownReply.ProtoReflect.Descriptor instead.
func (*ShutDownReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{22}
}

type CloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	SendOffset       *int64 `protobuf:"varint,2,opt,name=send_offset,json=sendOffset,proto3,oneof" json:"send_offset,omitempty"`
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{23}
}

func (x *CloseRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *CloseRequest) GetSendOffset() int64 {
	if x != nil && x.SendOffset != nil {
		return *x.SendOffset
	}
	return 0
}

type CloseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseReply) Reset() {
	*x = CloseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseReply) ProtoMessage() {}

func (x *CloseReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseReply.ProtoReflect.Descriptor instead.
func (*CloseReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{24}
}

type SendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string       `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	Data             []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	StreamOffset     int64        `protobuf:"varint,3,opt,name=stream_offset,json=streamOffset,proto3" json:"stream_offset,omitempty"`
	Flags            *int32       `protobuf:"varint,4,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	SendTo           *AddressPort `protobuf:"bytes,5,opt,name=send_to,json=sendTo,proto3,oneof" json:"send_to,omitempty"`
	TimeoutSeconds   *float64     `protobuf:"fixed64,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3,oneof" json:"timeout_seconds,omitempty"`
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{25}
}

func (x *SendRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *SendRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendRequest) GetStreamOffset() int64 {
	if x != nil {
		return x.StreamOffset
	}
	return 0
}

func (x *SendRequest) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *SendRequest) GetSendTo() *AddressPort {
	if x != nil {
		return x.SendTo
	}
	return nil
}

func (x *SendRequest) GetTimeoutSeconds() float64 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

type SendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSent *int32 `protobuf:"varint,1,opt,name=data_sent,json=dataSent,proto3,oneof" json:"data_sent,omitempty"`
}

func (x *SendReply) Reset() {
	*x = SendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReply) ProtoMessage() {}

func (x *SendReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReply.ProtoReflect.Descriptor instead.
func (*SendReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{26}
}

func (x *SendReply) GetDataSent() int32 {
	if x != nil && x.DataSent != nil {
		return *x.DataSent
	}
	return 0
}

type ReceiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string   `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	DataSize         int32    `protobuf:"varint,2,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	Flags            *int32   `protobuf:"varint,3,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	TimeoutSeconds   *float64 `protobuf:"fixed64,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3,oneof" json:"timeout_seconds,omitempty"`
}

func (x *ReceiveRequest) Reset() {
	*x = ReceiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRequest) ProtoMessage() {}

func (x *ReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRequest.ProtoReflect.Descriptor instead.
func (*ReceiveRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{27}
}

func (x *ReceiveRequest) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *ReceiveRequest) GetDataSize() int32 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *ReceiveRequest) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *ReceiveRequest) GetTimeoutSeconds() float64 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

type ReceiveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamOffset *int64       `protobuf:"varint,2,opt,name=stream_offset,json=streamOffset,proto3,oneof" json:"stream_offset,omitempty"`
	Data         []byte       `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
	ReceivedFrom *AddressPort `protobuf:"bytes,4,opt,name=received_from,json=receivedFrom,proto3,oneof" json:"received_from,omitempty"`
	BufferSize   *int32       `protobuf:"varint,5,opt,name=buffer_size,json=bufferSize,proto3,oneof" json:"buffer_size,omitempty"`
}

func (x *ReceiveReply) Reset() {
	*x = ReceiveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveReply) ProtoMessage() {}

func (x *ReceiveReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveReply.ProtoReflect.Descriptor instead.
func (*ReceiveReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{28}
}

func (x *ReceiveReply) GetStreamOffset() int64 {
	if x != nil && x.StreamOffset != nil {
		return *x.StreamOffset
	}
	return 0
}

func (x *ReceiveReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReceiveReply) GetReceivedFrom() *AddressPort {
	if x != nil {
		return x.ReceivedFrom
	}
	return nil
}

func (x *ReceiveReply) GetBufferSize() int32 {
	if x != nil && x.BufferSize != nil {
		return *x.BufferSize
	}
	return 0
}

type PollEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketDescriptor string `protobuf:"bytes,1,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	RequestedEvents  int32  `protobuf:"varint,2,opt,name=requested_events,json=requestedEvents,proto3" json:"requested_events,omitempty"`
	ObservedEvents   int32  `protobuf:"varint,3,opt,name=observed_events,json=observedEvents,proto3" json:"observed_events,omitempty"`
}

func (x *PollEvent) Reset() {
	*x = PollEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollEvent) ProtoMessage() {}

func (x *PollEvent) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollEvent.ProtoReflect.Descriptor instead.
func (*PollEvent) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{29}
}

func (x *PollEvent) GetSocketDescriptor() string {
	if x != nil {
		return x.SocketDescriptor
	}
	return ""
}

func (x *PollEvent) GetRequestedEvents() int32 {
	if x != nil {
		return x.RequestedEvents
	}
	return 0
}

func (x *PollEvent) GetObservedEvents() int32 {
	if x != nil {
		return x.ObservedEvents
	}
	return 0
}

type PollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events         []*PollEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	TimeoutSeconds *float64     `protobuf:"fixed64,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3,oneof" json:"timeout_seconds,omitempty"`
}

func (x *PollRequest) Reset() {
	*x = PollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollRequest) ProtoMessage() {}

func (x *PollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollRequest.ProtoReflect.Descriptor instead.
func (*PollRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{30}
}

func (x *PollRequest) GetEvents() []*PollEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PollRequest) GetTimeoutSeconds() float64 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

type PollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*PollEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *PollReply) Reset() {
	*x = PollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollReply) ProtoMessage() {}

func (x *PollReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollReply.ProtoReflect.Descriptor instead.
func (*PollReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{31}
}

func (x *PollReply) GetEvents() []*PollEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AddressFamilies []CreateSocketRequest_SocketFamily `protobuf:"varint,2,rep,packed,name=address_families,json=addressFamilies,proto3,enum=appengine.CreateSocketRequest_SocketFamily" json:"address_families,omitempty"`
}

func (x *ResolveRequest) Reset() {
	*x = ResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequest) ProtoMessage() {}

func (x *ResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequest.ProtoReflect.Descriptor instead.
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{32}
}

func (x *ResolveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResolveRequest) GetAddressFamilies() []CreateSocketRequest_SocketFamily {
	if x != nil {
		return x.AddressFamilies
	}
	return nil
}

type ResolveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackedAddress [][]byte `protobuf:"bytes,2,rep,name=packed_address,json=packedAddress,proto3" json:"packed_address,omitempty"`
	CanonicalName *string  `protobuf:"bytes,3,opt,name=canonical_name,json=canonicalName,proto3,oneof" json:"canonical_name,omitempty"`
	Aliases       []string `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *ResolveReply) Reset() {
	*x = ResolveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_socket_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveReply) ProtoMessage() {}

func (x *ResolveReply) ProtoReflect() protoreflect.Message {
	mi := &file_socket_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveReply.ProtoReflect.Descriptor instead.
func (*ResolveReply) Descriptor() ([]byte, []int) {
	return file_socket_service_proto_rawDescGZIP(), []int{33}
}

func (x *ResolveReply) GetPackedAddress() [][]byte {
	if x != nil {
		return x.PackedAddress
	}
	return nil
}

func (x *ResolveReply) GetCanonicalName() string {
	if x != nil && x.CanonicalName != nil {
		return *x.CanonicalName
	}
	return ""
}

func (x *ResolveReply) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

var File_socket_service_proto protoreflect.FileDescriptor

var file_socket_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x22, 0xba, 0x14, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x22, 0x82,
	0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x49, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x06,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x07, 0x22, 0xa6, 0x12, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x50, 0x45, 0x52,
	0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x53, 0x52, 0x43, 0x48,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x49, 0x4e, 0x54, 0x52, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x49, 0x4f, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x58, 0x49, 0x4f, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x32, 0x42, 0x49, 0x47, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x08, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x42, 0x41, 0x44, 0x46, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x57, 0x4f, 0x55, 0x4c, 0x44, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x4d, 0x10,
	0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x41, 0x43, 0x43, 0x45, 0x53, 0x10,
	0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x42, 0x4c, 0x4b,
	0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x42, 0x55, 0x53, 0x59, 0x10,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x11, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x58, 0x44, 0x45, 0x56, 0x10, 0x12,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x56, 0x10, 0x13,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x44, 0x49, 0x52, 0x10,
	0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x49, 0x53, 0x44, 0x49, 0x52, 0x10,
	0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x10,
	0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4d, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x54, 0x59, 0x10,
	0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x54, 0x58, 0x54, 0x42, 0x53, 0x59,
	0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x46, 0x42, 0x49, 0x47, 0x10,
	0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x53, 0x50, 0x43, 0x10,
	0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x53, 0x50, 0x49, 0x50, 0x45, 0x10,
	0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x52, 0x4f, 0x46, 0x53, 0x10, 0x1e,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x1f,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x50, 0x49, 0x50, 0x45, 0x10, 0x20, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x44, 0x4f, 0x4d, 0x10, 0x21, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x22, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4b, 0x10, 0x23, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x23, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x54, 0x4f,
	0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x24, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45,
	0x4e, 0x4f, 0x4c, 0x43, 0x4b, 0x10, 0x25, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45,
	0x4e, 0x4f, 0x53, 0x59, 0x53, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45,
	0x4e, 0x4f, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x27, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x4e, 0x4f, 0x4d, 0x53, 0x47, 0x10, 0x2a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x49, 0x44, 0x52, 0x4d, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f,
	0x45, 0x43, 0x48, 0x52, 0x4e, 0x47, 0x10, 0x2c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f,
	0x45, 0x4c, 0x32, 0x4e, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x2d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4c, 0x33, 0x48, 0x4c, 0x54, 0x10, 0x2e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4c, 0x33, 0x52, 0x53, 0x54, 0x10, 0x2f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4c, 0x4e, 0x52, 0x4e, 0x47, 0x10, 0x30, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x55, 0x4e, 0x41, 0x54, 0x43, 0x48, 0x10, 0x31, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x43, 0x53, 0x49, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x4c, 0x32, 0x48, 0x4c, 0x54, 0x10, 0x33, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x42, 0x41, 0x44, 0x45, 0x10, 0x34, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x42, 0x41, 0x44, 0x52, 0x10, 0x35, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x58, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x36, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x4e, 0x4f, 0x41, 0x4e, 0x4f, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x42, 0x41, 0x44, 0x52, 0x51, 0x43, 0x10, 0x38, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x42, 0x41, 0x44, 0x53, 0x4c, 0x54, 0x10, 0x39, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x42, 0x46, 0x4f, 0x4e, 0x54, 0x10, 0x3b, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x10, 0x3c, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x3d, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3e, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x53, 0x52, 0x10, 0x3f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x4e, 0x45, 0x54, 0x10, 0x40, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x50, 0x4b, 0x47, 0x10, 0x41, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x42, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x43, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x41, 0x44, 0x56, 0x10, 0x44, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x53, 0x52, 0x4d, 0x4e, 0x54, 0x10, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x46, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x47, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x48, 0x4f, 0x50, 0x10, 0x48, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x44, 0x4f, 0x54, 0x10, 0x49, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x42, 0x41, 0x44, 0x4d, 0x53, 0x47, 0x10, 0x4a, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10,
	0x4b, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x55, 0x4e, 0x49,
	0x51, 0x10, 0x4c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x42, 0x41, 0x44, 0x46,
	0x44, 0x10, 0x4d, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x52, 0x45, 0x4d, 0x43,
	0x48, 0x47, 0x10, 0x4e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4c, 0x49, 0x42,
	0x41, 0x43, 0x43, 0x10, 0x4f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4c, 0x49,
	0x42, 0x42, 0x41, 0x44, 0x10, 0x50, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4c,
	0x49, 0x42, 0x53, 0x43, 0x4e, 0x10, 0x51, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45,
	0x4c, 0x49, 0x42, 0x4d, 0x41, 0x58, 0x10, 0x52, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f,
	0x45, 0x4c, 0x49, 0x42, 0x45, 0x58, 0x45, 0x43, 0x10, 0x53, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x49, 0x4c, 0x53, 0x45, 0x51, 0x10, 0x54, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x55, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x53, 0x54, 0x52, 0x50, 0x49, 0x50, 0x45, 0x10, 0x56, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x57, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x53, 0x4f, 0x43, 0x4b, 0x10, 0x58,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x53, 0x54, 0x41, 0x44, 0x44,
	0x52, 0x52, 0x45, 0x51, 0x10, 0x59, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4d,
	0x53, 0x47, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x5a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x5f,
	0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x5b, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x4f, 0x50, 0x54, 0x10,
	0x5c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x4e,
	0x4f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x5d, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x53, 0x4f, 0x43, 0x4b, 0x54, 0x4e, 0x4f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x5e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4f, 0x50, 0x4e, 0x4f,
	0x54, 0x53, 0x55, 0x50, 0x50, 0x10, 0x5f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45,
	0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x10, 0x5f, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f,
	0x45, 0x50, 0x46, 0x4e, 0x4f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x60, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x41, 0x46, 0x4e, 0x4f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x41, 0x44, 0x44,
	0x52, 0x49, 0x4e, 0x55, 0x53, 0x45, 0x10, 0x62, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x53, 0x5f,
	0x45, 0x41, 0x44, 0x44, 0x52, 0x4e, 0x4f, 0x54, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x63, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x45, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x64, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x45, 0x54, 0x55, 0x4e, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e,
	0x45, 0x54, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x66, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x67, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x10, 0x68, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x42, 0x55,
	0x46, 0x53, 0x10, 0x69, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x10, 0x6a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f,
	0x54, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45,
	0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x52, 0x45, 0x46, 0x53, 0x10, 0x6d,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x4f, 0x55,
	0x54, 0x10, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4e,
	0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x48, 0x4f, 0x53, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x70, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x48, 0x4f, 0x53, 0x54, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x10, 0x71, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x49, 0x4e, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53,
	0x5f, 0x45, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x75, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x4e, 0x41, 0x4d, 0x10, 0x76, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x77, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x49, 0x53, 0x4e, 0x41, 0x4d, 0x10, 0x78, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x49, 0x4f, 0x10, 0x79, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x44, 0x51, 0x55, 0x4f, 0x54, 0x10, 0x7a, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x7b, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x10, 0x7c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x45,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x7d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x4b, 0x45, 0x59, 0x10, 0x7e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59,
	0x53, 0x5f, 0x45, 0x4b, 0x45, 0x59, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x7f, 0x12,
	0x14, 0x0a, 0x0f, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4b, 0x45, 0x59, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x44, 0x10, 0x80, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x4b, 0x45,
	0x59, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x81, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x53, 0x59, 0x53, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x83, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x52,
	0x46, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x84, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9c,
	0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x48, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x84, 0x05,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x22, 0x2c, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36,
	0x10, 0x02, 0x22, 0x2f, 0x0a, 0x0e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44,
	0x50, 0x10, 0x02, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x22, 0x7e, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x22, 0x6a, 0x0a, 0x09, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x73, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x47, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x70, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x22, 0x41,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x22, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x22, 0xdc, 0x07, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x65, 0x0a, 0x11, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x4c, 0x5f, 0x54,
	0x43, 0x50, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x11, 0x22, 0xcb, 0x05, 0x0a, 0x10, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x52, 0x45,
	0x55, 0x53, 0x45, 0x41, 0x44, 0x44, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f,
	0x44, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x4f, 0x5f, 0x53, 0x4e, 0x44, 0x42, 0x55, 0x46, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x52, 0x43, 0x56, 0x42, 0x55, 0x46, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x4b, 0x45,
	0x45, 0x50, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x4f, 0x4f, 0x42, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f,
	0x4c, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x52, 0x43, 0x56, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x10, 0x14,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x5f, 0x53, 0x4e,
	0x44, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x48, 0x44, 0x52, 0x49,
	0x4e, 0x43, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x49, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x43, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x53, 0x45, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x52, 0x4b, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x49, 0x4e, 0x54, 0x56,
	0x4c, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43,
	0x50, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x43, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x4e, 0x54,
	0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50,
	0x5f, 0x4c, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x32, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x43, 0x4c, 0x41,
	0x4d, 0x50, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x43, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x41, 0x43, 0x4b,
	0x10, 0x0c, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x79, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x31,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x79, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x22, 0x56, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x22,
	0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7e,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb7,
	0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x13, 0x6e, 0x65, 0x77, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x53, 0x68, 0x75,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x68, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x48, 0x6f, 0x77, 0x52, 0x03, 0x68, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x03,
	0x48, 0x6f, 0x77, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x5f, 0x52, 0x44, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x55, 0x54,
	0x5f, 0x57, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x48, 0x55, 0x54, 0x5f, 0x52, 0x44, 0x57, 0x52, 0x10, 0x03, 0x22, 0x0f, 0x0a, 0x0d, 0x53,
	0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x71, 0x0a, 0x0c,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x0c, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa0, 0x02,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x08, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x3b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xef, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x22, 0x2c, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x53, 0x47, 0x5f, 0x4f, 0x4f,
	0x42, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x45, 0x45, 0x4b, 0x10,
	0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0xfa, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x08, 0x01, 0x48, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xce, 0x03, 0x0a,
	0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x0d,
	0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c,
	0x4c, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x50, 0x4f, 0x4c, 0x4c, 0x50, 0x52, 0x49, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x52, 0x10,
	0x08, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c,
	0x48, 0x55, 0x50, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x50, 0x4f, 0x4c, 0x4c, 0x4e, 0x56, 0x41, 0x4c, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x52, 0x44, 0x4e, 0x4f, 0x52, 0x4d, 0x10,
	0x40, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c,
	0x52, 0x44, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x80, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x57, 0x52, 0x4e, 0x4f, 0x52, 0x4d, 0x10, 0x80,
	0x02, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c,
	0x57, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x80, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x4d, 0x53, 0x47, 0x10, 0x80, 0x08, 0x12, 0x16,
	0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x80, 0x20, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x52, 0x44, 0x48, 0x55, 0x50, 0x10, 0x80, 0x40, 0x22, 0x7d, 0x0a,
	0x0b, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x09,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x88, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x45, 0x41, 0x49, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x42, 0x41, 0x44, 0x46, 0x4c,
	0x41, 0x47, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x45, 0x41, 0x49, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x4e, 0x4f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x07, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x4e, 0x4f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x45, 0x41, 0x49, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x09, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x53, 0x4f, 0x43,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x42, 0x41, 0x44,
	0x48, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x0d,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x45, 0x41, 0x49, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_socket_service_proto_rawDescOnce sync.Once
	file_socket_service_proto_rawDescData = file_socket_service_proto_rawDesc
)

func file_socket_service_proto_rawDescGZIP() []byte {
	file_socket_service_proto_rawDescOnce.Do(func() {
		file_socket_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_socket_service_proto_rawDescData)
	})
	return file_socket_service_proto_rawDescData
}

var file_socket_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_socket_service_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_socket_service_proto_goTypes = []interface{}{
	(RemoteSocketServiceError_ErrorCode)(0),   // 0: appengine.RemoteSocketServiceError.ErrorCode
	(RemoteSocketServiceError_SystemError)(0), // 1: appengine.RemoteSocketServiceError.SystemError
	(CreateSocketRequest_SocketFamily)(0),     // 2: appengine.CreateSocketRequest.SocketFamily
	(CreateSocketRequest_SocketProtocol)(0),   // 3: appengine.CreateSocketRequest.SocketProtocol
	(SocketOption_SocketOptionLevel)(0),       // 4: appengine.SocketOption.SocketOptionLevel
	(SocketOption_SocketOptionName)(0),        // 5: appengine.SocketOption.SocketOptionName
	(ShutDownRequest_How)(0),                  // 6: appengine.ShutDownRequest.How
	(ReceiveRequest_Flags)(0),                 // 7: appengine.ReceiveRequest.Flags
	(PollEvent_PollEventFlag)(0),              // 8: appengine.PollEvent.PollEventFlag
	(ResolveReply_ErrorCode)(0),               // 9: appengine.ResolveReply.ErrorCode
	(*RemoteSocketServiceError)(nil),          // 10: appengine.RemoteSocketServiceError
	(*AddressPort)(nil),                       // 11: appengine.AddressPort
	(*CreateSocketRequest)(nil),               // 12: appengine.CreateSocketRequest
	(*CreateSocketReply)(nil),                 // 13: appengine.CreateSocketReply
	(*BindRequest)(nil),                       // 14: appengine.BindRequest
	(*BindReply)(nil),                         // 15: appengine.BindReply
	(*GetSocketNameRequest)(nil),              // 16: appengine.GetSocketNameRequest
	(*GetSocketNameReply)(nil),                // 17: appengine.GetSocketNameReply
	(*GetPeerNameRequest)(nil),                // 18: appengine.GetPeerNameRequest
	(*GetPeerNameReply)(nil),                  // 19: appengine.GetPeerNameReply
	(*SocketOption)(nil),                      // 20: appengine.SocketOption
	(*SetSocketOptionsRequest)(nil),           // 21: appengine.SetSocketOptionsRequest
	(*SetSocketOptionsReply)(nil),             // 22: appengine.SetSocketOptionsReply
	(*GetSocketOptionsRequest)(nil),           // 23: appengine.GetSocketOptionsRequest
	(*GetSocketOptionsReply)(nil),             // 24: appengine.GetSocketOptionsReply
	(*ConnectRequest)(nil),                    // 25: appengine.ConnectRequest
	(*ConnectReply)(nil),                      // 26: appengine.ConnectReply
	(*ListenRequest)(nil),                     // 27: appengine.ListenRequest
	(*ListenReply)(nil),                       // 28: appengine.ListenReply
	(*AcceptRequest)(nil),                     // 29: appengine.AcceptRequest
	(*AcceptReply)(nil),                       // 30: appengine.AcceptReply
	(*ShutDownRequest)(nil),                   // 31: appengine.ShutDownRequest
	(*ShutDownReply)(nil),                     // 32: appengine.ShutDownReply
	(*CloseRequest)(nil),                      // 33: appengine.CloseRequest
	(*CloseReply)(nil),                        // 34: appengine.CloseReply
	(*SendRequest)(nil),                       // 35: appengine.SendRequest
	(*SendReply)(nil),                         // 36: appengine.SendReply
	(*ReceiveRequest)(nil),                    // 37: appengine.ReceiveRequest
	(*ReceiveReply)(nil),                      // 38: appengine.ReceiveReply
	(*PollEvent)(nil),                         // 39: appengine.PollEvent
	(*PollRequest)(nil),                       // 40: appengine.PollRequest
	(*PollReply)(nil),                         // 41: appengine.PollReply
	(*ResolveRequest)(nil),                    // 42: appengine.ResolveRequest
	(*ResolveReply)(nil),                      // 43: appengine.ResolveReply
}
var file_socket_service_proto_depIdxs = []int32{
	2,  // 0: appengine.CreateSocketRequest.family:type_name -> appengine.CreateSocketRequest.SocketFamily
	3,  // 1: appengine.CreateSocketRequest.protocol:type_name -> appengine.CreateSocketRequest.SocketProtocol
	20, // 2: appengine.CreateSocketRequest.socket_options:type_name -> appengine.SocketOption
	11, // 3: appengine.CreateSocketRequest.proxy_external_ip:type_name -> appengine.AddressPort
	11, // 4: appengine.CreateSocketRequest.remote_ip:type_name -> appengine.AddressPort
	11, // 5: appengine.CreateSocketReply.server_address:type_name -> appengine.AddressPort
	11, // 6: appengine.CreateSocketReply.proxy_external_ip:type_name -> appengine.AddressPort
	11, // 7: appengine.BindRequest.proxy_external_ip:type_name -> appengine.AddressPort
	11, // 8: appengine.BindReply.proxy_external_ip:type_name -> appengine.AddressPort
	11, // 9: appengine.GetSocketNameReply.proxy_external_ip:type_name -> appengine.AddressPort
	11, // 10: appengine.GetPeerNameReply.peer_ip:type_name -> appengine.AddressPort
	4,  // 11: appengine.SocketOption.level:type_name -> appengine.SocketOption.SocketOptionLevel
	5,  // 12: appengine.SocketOption.option:type_name -> appengine.SocketOption.SocketOptionName
	20, // 13: appengine.SetSocketOptionsRequest.options:type_name -> appengine.SocketOption
	20, // 14: appengine.GetSocketOptionsRequest.options:type_name -> appengine.SocketOption
	20, // 15: appengine.GetSocketOptionsReply.options:type_name -> appengine.SocketOption
	11, // 16: appengine.ConnectRequest.remote_ip:type_name -> appengine.AddressPort
	11, // 17: appengine.ConnectReply.proxy_external_ip:type_name -> appengine.AddressPort
	11, // 18: appengine.AcceptReply.remote_address:type_name -> appengine.AddressPort
	6,  // 19: appengine.ShutDownRequest.how:type_name -> appengine.ShutDownRequest.How
	11, // 20: appengine.SendRequest.send_to:type_name -> appengine.AddressPort
	11, // 21: appengine.ReceiveReply.received_from:type_name -> appengine.AddressPort
	39, // 22: appengine.PollRequest.events:type_name -> appengine.PollEvent
	39, // 23: appengine.PollReply.events:type_name -> appengine.PollEvent
	2,  // 24: appengine.ResolveRequest.address_families:type_name -> appengine.CreateSocketRequest.SocketFamily
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_socket_service_proto_init() }
func file_socket_service_proto_init() {
	if File_socket_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_socket_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteSocketServiceError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSocketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocketNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocketNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeerNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeerNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSocketOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSocketOptionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocketOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocketOptionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutDownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutDownReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_socket_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_socket_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_socket_service_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_socket_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_socket_service_proto_goTypes,
		DependencyIndexes: file_socket_service_proto_depIdxs,
		EnumInfos:         file_socket_service_proto_enumTypes,
		MessageInfos:      file_socket_service_proto_msgTypes,
	}.Build()
	File_socket_service_proto = out.File
	file_socket_service_proto_rawDesc = nil
	file_socket_service_proto_goTypes = nil
	file_socket_service_proto_depIdxs = nil
}
